
EstacionCalorPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080043d4  080043d4  000053d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004800  08004800  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  08004800  08004800  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004800  08004800  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004800  08004800  00005800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004804  08004804  00005804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004808  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000060  08004868  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004868  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1e3  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da1  00000000  00000000  0001026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00012010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ee  00000000  00000000  00012928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b5c  00000000  00000000  00013016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfda  00000000  00000000  0002ab72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000847cb  00000000  00000000  00036b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c4  00000000  00000000  000bb35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000bdd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080043bc 	.word	0x080043bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080043bc 	.word	0x080043bc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__gesf2>:
 8000368:	f04f 3cff 	mov.w	ip, #4294967295
 800036c:	e006      	b.n	800037c <__cmpsf2+0x4>
 800036e:	bf00      	nop

08000370 <__lesf2>:
 8000370:	f04f 0c01 	mov.w	ip, #1
 8000374:	e002      	b.n	800037c <__cmpsf2+0x4>
 8000376:	bf00      	nop

08000378 <__cmpsf2>:
 8000378:	f04f 0c01 	mov.w	ip, #1
 800037c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000380:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000384:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000388:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800038c:	bf18      	it	ne
 800038e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000392:	d011      	beq.n	80003b8 <__cmpsf2+0x40>
 8000394:	b001      	add	sp, #4
 8000396:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800039a:	bf18      	it	ne
 800039c:	ea90 0f01 	teqne	r0, r1
 80003a0:	bf58      	it	pl
 80003a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003a6:	bf88      	it	hi
 80003a8:	17c8      	asrhi	r0, r1, #31
 80003aa:	bf38      	it	cc
 80003ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003b0:	bf18      	it	ne
 80003b2:	f040 0001 	orrne.w	r0, r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	d102      	bne.n	80003c4 <__cmpsf2+0x4c>
 80003be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003c2:	d105      	bne.n	80003d0 <__cmpsf2+0x58>
 80003c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003c8:	d1e4      	bne.n	8000394 <__cmpsf2+0x1c>
 80003ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003ce:	d0e1      	beq.n	8000394 <__cmpsf2+0x1c>
 80003d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <__aeabi_cfrcmple>:
 80003d8:	4684      	mov	ip, r0
 80003da:	4608      	mov	r0, r1
 80003dc:	4661      	mov	r1, ip
 80003de:	e7ff      	b.n	80003e0 <__aeabi_cfcmpeq>

080003e0 <__aeabi_cfcmpeq>:
 80003e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80003e2:	f7ff ffc9 	bl	8000378 <__cmpsf2>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	bf48      	it	mi
 80003ea:	f110 0f00 	cmnmi.w	r0, #0
 80003ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080003f0 <__aeabi_fcmpeq>:
 80003f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80003f4:	f7ff fff4 	bl	80003e0 <__aeabi_cfcmpeq>
 80003f8:	bf0c      	ite	eq
 80003fa:	2001      	moveq	r0, #1
 80003fc:	2000      	movne	r0, #0
 80003fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000402:	bf00      	nop

08000404 <__aeabi_fcmplt>:
 8000404:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000408:	f7ff ffea 	bl	80003e0 <__aeabi_cfcmpeq>
 800040c:	bf34      	ite	cc
 800040e:	2001      	movcc	r0, #1
 8000410:	2000      	movcs	r0, #0
 8000412:	f85d fb08 	ldr.w	pc, [sp], #8
 8000416:	bf00      	nop

08000418 <__aeabi_fcmple>:
 8000418:	f84d ed08 	str.w	lr, [sp, #-8]!
 800041c:	f7ff ffe0 	bl	80003e0 <__aeabi_cfcmpeq>
 8000420:	bf94      	ite	ls
 8000422:	2001      	movls	r0, #1
 8000424:	2000      	movhi	r0, #0
 8000426:	f85d fb08 	ldr.w	pc, [sp], #8
 800042a:	bf00      	nop

0800042c <__aeabi_fcmpge>:
 800042c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000430:	f7ff ffd2 	bl	80003d8 <__aeabi_cfrcmple>
 8000434:	bf94      	ite	ls
 8000436:	2001      	movls	r0, #1
 8000438:	2000      	movhi	r0, #0
 800043a:	f85d fb08 	ldr.w	pc, [sp], #8
 800043e:	bf00      	nop

08000440 <__aeabi_fcmpgt>:
 8000440:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000444:	f7ff ffc8 	bl	80003d8 <__aeabi_cfrcmple>
 8000448:	bf34      	ite	cc
 800044a:	2001      	movcc	r0, #1
 800044c:	2000      	movcs	r0, #0
 800044e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000452:	bf00      	nop

08000454 <ILI9341_Draw_Hollow_Circle>:
#include "5x5_font.h"
#include "spi.h"

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b089      	sub	sp, #36	@ 0x24
 8000458:	af00      	add	r7, sp, #0
 800045a:	4604      	mov	r4, r0
 800045c:	4608      	mov	r0, r1
 800045e:	4611      	mov	r1, r2
 8000460:	461a      	mov	r2, r3
 8000462:	4623      	mov	r3, r4
 8000464:	80fb      	strh	r3, [r7, #6]
 8000466:	4603      	mov	r3, r0
 8000468:	80bb      	strh	r3, [r7, #4]
 800046a:	460b      	mov	r3, r1
 800046c:	807b      	strh	r3, [r7, #2]
 800046e:	4613      	mov	r3, r2
 8000470:	803b      	strh	r3, [r7, #0]
	int x = Radius-1;
 8000472:	887b      	ldrh	r3, [r7, #2]
 8000474:	3b01      	subs	r3, #1
 8000476:	61fb      	str	r3, [r7, #28]
    int y = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 800047c:	2301      	movs	r3, #1
 800047e:	617b      	str	r3, [r7, #20]
    int dy = 1;
 8000480:	2301      	movs	r3, #1
 8000482:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 8000484:	887b      	ldrh	r3, [r7, #2]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 800048e:	e08d      	b.n	80005ac <ILI9341_Draw_Hollow_Circle+0x158>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	b29a      	uxth	r2, r3
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	4413      	add	r3, r2
 8000498:	b298      	uxth	r0, r3
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	b29a      	uxth	r2, r3
 800049e:	88bb      	ldrh	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	883a      	ldrh	r2, [r7, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	f000 fdb0 	bl	800100c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 80004ac:	69bb      	ldr	r3, [r7, #24]
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	88fb      	ldrh	r3, [r7, #6]
 80004b2:	4413      	add	r3, r2
 80004b4:	b298      	uxth	r0, r3
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	88bb      	ldrh	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	b29b      	uxth	r3, r3
 80004c0:	883a      	ldrh	r2, [r7, #0]
 80004c2:	4619      	mov	r1, r3
 80004c4:	f000 fda2 	bl	800100c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 80004c8:	69bb      	ldr	r3, [r7, #24]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	88fa      	ldrh	r2, [r7, #6]
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	b298      	uxth	r0, r3
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	88bb      	ldrh	r3, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	b29b      	uxth	r3, r3
 80004dc:	883a      	ldrh	r2, [r7, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	f000 fd94 	bl	800100c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	88fa      	ldrh	r2, [r7, #6]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	b298      	uxth	r0, r3
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	88bb      	ldrh	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	883a      	ldrh	r2, [r7, #0]
 80004fa:	4619      	mov	r1, r3
 80004fc:	f000 fd86 	bl	800100c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	b29b      	uxth	r3, r3
 8000504:	88fa      	ldrh	r2, [r7, #6]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	b298      	uxth	r0, r3
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	b29b      	uxth	r3, r3
 800050e:	88ba      	ldrh	r2, [r7, #4]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	b29b      	uxth	r3, r3
 8000514:	883a      	ldrh	r2, [r7, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	f000 fd78 	bl	800100c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	b29b      	uxth	r3, r3
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	b298      	uxth	r0, r3
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	b29b      	uxth	r3, r3
 800052a:	88ba      	ldrh	r2, [r7, #4]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	b29b      	uxth	r3, r3
 8000530:	883a      	ldrh	r2, [r7, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	f000 fd6a 	bl	800100c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	b29a      	uxth	r2, r3
 800053c:	88fb      	ldrh	r3, [r7, #6]
 800053e:	4413      	add	r3, r2
 8000540:	b298      	uxth	r0, r3
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	b29b      	uxth	r3, r3
 8000546:	88ba      	ldrh	r2, [r7, #4]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	883a      	ldrh	r2, [r7, #0]
 800054e:	4619      	mov	r1, r3
 8000550:	f000 fd5c 	bl	800100c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	b29a      	uxth	r2, r3
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	4413      	add	r3, r2
 800055c:	b298      	uxth	r0, r3
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	b29b      	uxth	r3, r3
 8000562:	88ba      	ldrh	r2, [r7, #4]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	b29b      	uxth	r3, r3
 8000568:	883a      	ldrh	r2, [r7, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	f000 fd4e 	bl	800100c <ILI9341_Draw_Pixel>

        if (err <= 0)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	dc09      	bgt.n	800058a <ILI9341_Draw_Hollow_Circle+0x136>
        {
            y++;
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	3301      	adds	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
            err += dy;
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	4413      	add	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]
            dy += 2;
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	3302      	adds	r3, #2
 8000588:	613b      	str	r3, [r7, #16]
        }
        if (err > 0)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b00      	cmp	r3, #0
 800058e:	dd0d      	ble.n	80005ac <ILI9341_Draw_Hollow_Circle+0x158>
        {
            x--;
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	3b01      	subs	r3, #1
 8000594:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3302      	adds	r3, #2
 800059a:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	425b      	negs	r3, r3
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	4413      	add	r3, r2
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	4413      	add	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 80005ac:	69fa      	ldr	r2, [r7, #28]
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	f6bf af6d 	bge.w	8000490 <ILI9341_Draw_Hollow_Circle+0x3c>
        }
    }
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3724      	adds	r7, #36	@ 0x24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd90      	pop	{r4, r7, pc}

080005c0 <ILI9341_Draw_Filled_Circle>:

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	@ 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	4603      	mov	r3, r0
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
 80005da:	4613      	mov	r3, r2
 80005dc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	f1c3 0301 	rsb	r3, r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80005f8:	e061      	b.n	80006be <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	e018      	b.n	8000636 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	b298      	uxth	r0, r3
 8000608:	6a3b      	ldr	r3, [r7, #32]
 800060a:	b29a      	uxth	r2, r3
 800060c:	88bb      	ldrh	r3, [r7, #4]
 800060e:	4413      	add	r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	883a      	ldrh	r2, [r7, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f000 fcf9 	bl	800100c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	b298      	uxth	r0, r3
 800061e:	6a3b      	ldr	r3, [r7, #32]
 8000620:	b29b      	uxth	r3, r3
 8000622:	88ba      	ldrh	r2, [r7, #4]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	883a      	ldrh	r2, [r7, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	f000 fcee 	bl	800100c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	3301      	adds	r3, #1
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	88fa      	ldrh	r2, [r7, #6]
 8000638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063a:	4413      	add	r3, r2
 800063c:	693a      	ldr	r2, [r7, #16]
 800063e:	429a      	cmp	r2, r3
 8000640:	dde0      	ble.n	8000604 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e018      	b.n	800067e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	b298      	uxth	r0, r3
 8000650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000652:	b29a      	uxth	r2, r3
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	883a      	ldrh	r2, [r7, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	f000 fcd5 	bl	800100c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	b298      	uxth	r0, r3
 8000666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000668:	b29b      	uxth	r3, r3
 800066a:	88ba      	ldrh	r2, [r7, #4]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	b29b      	uxth	r3, r3
 8000670:	883a      	ldrh	r2, [r7, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	f000 fcca 	bl	800100c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	6a3b      	ldr	r3, [r7, #32]
 8000682:	4413      	add	r3, r2
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	429a      	cmp	r2, r3
 8000688:	dde0      	ble.n	800064c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	3301      	adds	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	4413      	add	r3, r2
 8000696:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	3302      	adds	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	005a      	lsls	r2, r3, #1
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	4413      	add	r3, r2
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	dd09      	ble.n	80006be <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	3b01      	subs	r3, #1
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
            radiusError += xChange;
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	4413      	add	r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	3302      	adds	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80006be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006c0:	6a3b      	ldr	r3, [r7, #32]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	da99      	bge.n	80005fa <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	372c      	adds	r7, #44	@ 0x2c
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}

080006d0 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4604      	mov	r4, r0
 80006d8:	4608      	mov	r0, r1
 80006da:	4611      	mov	r1, r2
 80006dc:	461a      	mov	r2, r3
 80006de:	4623      	mov	r3, r4
 80006e0:	80fb      	strh	r3, [r7, #6]
 80006e2:	4603      	mov	r3, r0
 80006e4:	80bb      	strh	r3, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	807b      	strh	r3, [r7, #2]
 80006ea:	4613      	mov	r3, r2
 80006ec:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000704:	887a      	ldrh	r2, [r7, #2]
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fdd8 	bl	80002c0 <__aeabi_i2f>
 8000710:	4603      	mov	r3, r0
 8000712:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff fe73 	bl	8000404 <__aeabi_fcmplt>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000724:	2301      	movs	r3, #1
 8000726:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 800072e:	883a      	ldrh	r2, [r7, #0]
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fdc3 	bl	80002c0 <__aeabi_i2f>
 800073a:	4603      	mov	r3, r0
 800073c:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 800073e:	f04f 0100 	mov.w	r1, #0
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f7ff fe5e 	bl	8000404 <__aeabi_fcmplt>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 800074e:	2301      	movs	r3, #1
 8000750:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000752:	7cfb      	ldrb	r3, [r7, #19]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d104      	bne.n	8000762 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8000758:	887a      	ldrh	r2, [r7, #2]
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	82fb      	strh	r3, [r7, #22]
 8000760:	e003      	b.n	800076a <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 800076a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800076c:	8afa      	ldrh	r2, [r7, #22]
 800076e:	88b9      	ldrh	r1, [r7, #4]
 8000770:	88f8      	ldrh	r0, [r7, #6]
 8000772:	f000 fd6f 	bl	8001254 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8000776:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000778:	8afa      	ldrh	r2, [r7, #22]
 800077a:	8839      	ldrh	r1, [r7, #0]
 800077c:	88f8      	ldrh	r0, [r7, #6]
 800077e:	f000 fd69 	bl	8001254 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000782:	7cbb      	ldrb	r3, [r7, #18]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d104      	bne.n	8000792 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8000788:	883a      	ldrh	r2, [r7, #0]
 800078a:	88bb      	ldrh	r3, [r7, #4]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	82bb      	strh	r3, [r7, #20]
 8000790:	e003      	b.n	800079a <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	883b      	ldrh	r3, [r7, #0]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 800079a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800079c:	8aba      	ldrh	r2, [r7, #20]
 800079e:	88b9      	ldrh	r1, [r7, #4]
 80007a0:	88f8      	ldrh	r0, [r7, #6]
 80007a2:	f000 fd9b 	bl	80012dc <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 80007a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007a8:	8aba      	ldrh	r2, [r7, #20]
 80007aa:	88b9      	ldrh	r1, [r7, #4]
 80007ac:	8878      	ldrh	r0, [r7, #2]
 80007ae:	f000 fd95 	bl	80012dc <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 80007b2:	8afb      	ldrh	r3, [r7, #22]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 80007b8:	8abb      	ldrh	r3, [r7, #20]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80007be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007c0:	8839      	ldrh	r1, [r7, #0]
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fc21 	bl	800100c <ILI9341_Draw_Pixel>
	}
	
}
 80007ca:	bf00      	nop
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}

080007d2 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80007d2:	b590      	push	{r4, r7, lr}
 80007d4:	b089      	sub	sp, #36	@ 0x24
 80007d6:	af02      	add	r7, sp, #8
 80007d8:	4604      	mov	r4, r0
 80007da:	4608      	mov	r0, r1
 80007dc:	4611      	mov	r1, r2
 80007de:	461a      	mov	r2, r3
 80007e0:	4623      	mov	r3, r4
 80007e2:	80fb      	strh	r3, [r7, #6]
 80007e4:	4603      	mov	r3, r0
 80007e6:	80bb      	strh	r3, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
 80007ec:	4613      	mov	r3, r2
 80007ee:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800080c:	887a      	ldrh	r2, [r7, #2]
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	2b00      	cmp	r3, #0
 8000818:	da01      	bge.n	800081e <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800081a:	2301      	movs	r3, #1
 800081c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8000822:	883a      	ldrh	r2, [r7, #0]
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2b00      	cmp	r3, #0
 800082e:	da01      	bge.n	8000834 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8000830:	2301      	movs	r3, #1
 8000832:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d106      	bne.n	8000848 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800083a:	887a      	ldrh	r2, [r7, #2]
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	823b      	strh	r3, [r7, #16]
 8000846:	e005      	b.n	8000854 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8000848:	88fa      	ldrh	r2, [r7, #6]
 800084a:	887b      	ldrh	r3, [r7, #2]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000854:	7cbb      	ldrb	r3, [r7, #18]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d106      	bne.n	8000868 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800085a:	883a      	ldrh	r2, [r7, #0]
 800085c:	88bb      	ldrh	r3, [r7, #4]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8000862:	88bb      	ldrh	r3, [r7, #4]
 8000864:	81fb      	strh	r3, [r7, #14]
 8000866:	e005      	b.n	8000874 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8000868:	88ba      	ldrh	r2, [r7, #4]
 800086a:	883b      	ldrh	r3, [r7, #0]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8000870:	883b      	ldrh	r3, [r7, #0]
 8000872:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8000874:	8abc      	ldrh	r4, [r7, #20]
 8000876:	8afa      	ldrh	r2, [r7, #22]
 8000878:	89f9      	ldrh	r1, [r7, #14]
 800087a:	8a38      	ldrh	r0, [r7, #16]
 800087c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	4623      	mov	r3, r4
 8000882:	f000 fc8b 	bl	800119c <ILI9341_Draw_Rectangle>
}
 8000886:	bf00      	nop
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}
	...

08000890 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b089      	sub	sp, #36	@ 0x24
 8000894:	af02      	add	r7, sp, #8
 8000896:	4604      	mov	r4, r0
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4623      	mov	r3, r4
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	4603      	mov	r3, r0
 80008a4:	71bb      	strb	r3, [r7, #6]
 80008a6:	460b      	mov	r3, r1
 80008a8:	717b      	strb	r3, [r7, #5]
 80008aa:	4613      	mov	r3, r2
 80008ac:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80008b2:	7dfb      	ldrb	r3, [r7, #23]
 80008b4:	2b1f      	cmp	r3, #31
 80008b6:	d802      	bhi.n	80008be <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	e002      	b.n	80008c4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	3b20      	subs	r3, #32
 80008c2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	753b      	strb	r3, [r7, #20]
 80008c8:	e012      	b.n	80008f0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80008ca:	7dfa      	ldrb	r2, [r7, #23]
 80008cc:	7d38      	ldrb	r0, [r7, #20]
 80008ce:	7d39      	ldrb	r1, [r7, #20]
 80008d0:	4c3b      	ldr	r4, [pc, #236]	@ (80009c0 <ILI9341_Draw_Char+0x130>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	4423      	add	r3, r4
 80008dc:	4403      	add	r3, r0
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	f101 0318 	add.w	r3, r1, #24
 80008e4:	443b      	add	r3, r7
 80008e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80008ea:	7d3b      	ldrb	r3, [r7, #20]
 80008ec:	3301      	adds	r3, #1
 80008ee:	753b      	strb	r3, [r7, #20]
 80008f0:	7d3b      	ldrb	r3, [r7, #20]
 80008f2:	2b05      	cmp	r3, #5
 80008f4:	d9e9      	bls.n	80008ca <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	b298      	uxth	r0, r3
 80008fa:	797b      	ldrb	r3, [r7, #5]
 80008fc:	b299      	uxth	r1, r3
 80008fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000900:	461a      	mov	r2, r3
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	b29a      	uxth	r2, r3
 800090a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	b29c      	uxth	r4, r3
 8000910:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4623      	mov	r3, r4
 8000916:	f000 fc41 	bl	800119c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800091a:	2300      	movs	r3, #0
 800091c:	757b      	strb	r3, [r7, #21]
 800091e:	e047      	b.n	80009b0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000920:	2300      	movs	r3, #0
 8000922:	75bb      	strb	r3, [r7, #22]
 8000924:	e03e      	b.n	80009a4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8000926:	7d7b      	ldrb	r3, [r7, #21]
 8000928:	3318      	adds	r3, #24
 800092a:	443b      	add	r3, r7
 800092c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000930:	461a      	mov	r2, r3
 8000932:	7dbb      	ldrb	r3, [r7, #22]
 8000934:	fa42 f303 	asr.w	r3, r2, r3
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d02e      	beq.n	800099e <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000940:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000942:	2b01      	cmp	r3, #1
 8000944:	d110      	bne.n	8000968 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	b29a      	uxth	r2, r3
 800094a:	7d7b      	ldrb	r3, [r7, #21]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	b298      	uxth	r0, r3
 8000952:	797b      	ldrb	r3, [r7, #5]
 8000954:	b29a      	uxth	r2, r3
 8000956:	7dbb      	ldrb	r3, [r7, #22]
 8000958:	b29b      	uxth	r3, r3
 800095a:	4413      	add	r3, r2
 800095c:	b29b      	uxth	r3, r3
 800095e:	887a      	ldrh	r2, [r7, #2]
 8000960:	4619      	mov	r1, r3
 8000962:	f000 fb53 	bl	800100c <ILI9341_Draw_Pixel>
 8000966:	e01a      	b.n	800099e <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	b29a      	uxth	r2, r3
 800096c:	7d7b      	ldrb	r3, [r7, #21]
 800096e:	b29b      	uxth	r3, r3
 8000970:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000972:	fb01 f303 	mul.w	r3, r1, r3
 8000976:	b29b      	uxth	r3, r3
 8000978:	4413      	add	r3, r2
 800097a:	b298      	uxth	r0, r3
 800097c:	797b      	ldrb	r3, [r7, #5]
 800097e:	b29a      	uxth	r2, r3
 8000980:	7dbb      	ldrb	r3, [r7, #22]
 8000982:	b29b      	uxth	r3, r3
 8000984:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000986:	fb01 f303 	mul.w	r3, r1, r3
 800098a:	b29b      	uxth	r3, r3
 800098c:	4413      	add	r3, r2
 800098e:	b299      	uxth	r1, r3
 8000990:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000992:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	4623      	mov	r3, r4
 800099a:	f000 fbff 	bl	800119c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800099e:	7dbb      	ldrb	r3, [r7, #22]
 80009a0:	3301      	adds	r3, #1
 80009a2:	75bb      	strb	r3, [r7, #22]
 80009a4:	7dbb      	ldrb	r3, [r7, #22]
 80009a6:	2b07      	cmp	r3, #7
 80009a8:	d9bd      	bls.n	8000926 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80009aa:	7d7b      	ldrb	r3, [r7, #21]
 80009ac:	3301      	adds	r3, #1
 80009ae:	757b      	strb	r3, [r7, #21]
 80009b0:	7d7b      	ldrb	r3, [r7, #21]
 80009b2:	2b05      	cmp	r3, #5
 80009b4:	d9b4      	bls.n	8000920 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	371c      	adds	r7, #28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	08004560 	.word	0x08004560

080009c4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	4608      	mov	r0, r1
 80009ce:	4611      	mov	r1, r2
 80009d0:	461a      	mov	r2, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	70fb      	strb	r3, [r7, #3]
 80009d6:	460b      	mov	r3, r1
 80009d8:	70bb      	strb	r3, [r7, #2]
 80009da:	4613      	mov	r3, r2
 80009dc:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80009de:	e017      	b.n	8000a10 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	7818      	ldrb	r0, [r3, #0]
 80009e8:	883c      	ldrh	r4, [r7, #0]
 80009ea:	78ba      	ldrb	r2, [r7, #2]
 80009ec:	78f9      	ldrb	r1, [r7, #3]
 80009ee:	8bbb      	ldrh	r3, [r7, #28]
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	8b3b      	ldrh	r3, [r7, #24]
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	4623      	mov	r3, r4
 80009f8:	f7ff ff4a 	bl	8000890 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80009fc:	8b3b      	ldrh	r3, [r7, #24]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	0052      	lsls	r2, r2, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1e3      	bne.n	80009e0 <ILI9341_Draw_Text+0x1c>
    }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}
	...

08000a24 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
MX_SPI1_Init();																							//SPI INIT
 8000a28:	f001 fb38 	bl	800209c <MX_SPI1_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000a2c:	f000 fc9a 	bl	8001364 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000a30:	2200      	movs	r2, #0
 8000a32:	2101      	movs	r1, #1
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <ILI9341_SPI_Init+0x1c>)
 8000a36:	f001 ffab 	bl	8002990 <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010c00 	.word	0x40010c00

08000a44 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000a4e:	1df9      	adds	r1, r7, #7
 8000a50:	2301      	movs	r3, #1
 8000a52:	2201      	movs	r2, #1
 8000a54:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <ILI9341_SPI_Send+0x20>)
 8000a56:	f002 fc47 	bl	80032e8 <HAL_SPI_Transmit>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000c8 	.word	0x200000c8

08000a68 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2101      	movs	r1, #1
 8000a76:	480a      	ldr	r0, [pc, #40]	@ (8000aa0 <ILI9341_Write_Command+0x38>)
 8000a78:	f001 ff8a 	bl	8002990 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <ILI9341_Write_Command+0x38>)
 8000a82:	f001 ff85 	bl	8002990 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ffdb 	bl	8000a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2101      	movs	r1, #1
 8000a92:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <ILI9341_Write_Command+0x38>)
 8000a94:	f001 ff7c 	bl	8002990 <HAL_GPIO_WritePin>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	480a      	ldr	r0, [pc, #40]	@ (8000adc <ILI9341_Write_Data+0x38>)
 8000ab4:	f001 ff6c 	bl	8002990 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2101      	movs	r1, #1
 8000abc:	4807      	ldr	r0, [pc, #28]	@ (8000adc <ILI9341_Write_Data+0x38>)
 8000abe:	f001 ff67 	bl	8002990 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ffbd 	bl	8000a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2101      	movs	r1, #1
 8000ace:	4803      	ldr	r0, [pc, #12]	@ (8000adc <ILI9341_Write_Data+0x38>)
 8000ad0:	f001 ff5e 	bl	8002990 <HAL_GPIO_WritePin>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4608      	mov	r0, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	4623      	mov	r3, r4
 8000af0:	80fb      	strh	r3, [r7, #6]
 8000af2:	4603      	mov	r3, r0
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	807b      	strh	r3, [r7, #2]
 8000afa:	4613      	mov	r3, r2
 8000afc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000afe:	202a      	movs	r0, #42	@ 0x2a
 8000b00:	f7ff ffb2 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ffc9 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffc4 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffbd 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ffb8 	bl	8000aa4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000b34:	202b      	movs	r0, #43	@ 0x2b
 8000b36:	f7ff ff97 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000b3a:	88bb      	ldrh	r3, [r7, #4]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ffae 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000b48:	88bb      	ldrh	r3, [r7, #4]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffa9 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000b52:	883b      	ldrh	r3, [r7, #0]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ffa2 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000b60:	883b      	ldrh	r3, [r7, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff9d 	bl	8000aa4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000b6a:	202c      	movs	r0, #44	@ 0x2c
 8000b6c:	f7ff ff7c 	bl	8000a68 <ILI9341_Write_Command>
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}

08000b78 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b82:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <ILI9341_Reset+0x38>)
 8000b84:	f001 ff04 	bl	8002990 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b88:	20c8      	movs	r0, #200	@ 0xc8
 8000b8a:	f001 fc75 	bl	8002478 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2101      	movs	r1, #1
 8000b92:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <ILI9341_Reset+0x38>)
 8000b94:	f001 fefc 	bl	8002990 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b98:	20c8      	movs	r0, #200	@ 0xc8
 8000b9a:	f001 fc6d 	bl	8002478 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <ILI9341_Reset+0x38>)
 8000ba6:	f001 fef3 	bl	8002990 <HAL_GPIO_WritePin>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40010c00 	.word	0x40010c00

08000bb4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000bc2:	2036      	movs	r0, #54	@ 0x36
 8000bc4:	f7ff ff50 	bl	8000a68 <ILI9341_Write_Command>
HAL_Delay(1);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f001 fc55 	bl	8002478 <HAL_Delay>
	
switch(screen_rotation) 
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d837      	bhi.n	8000c44 <ILI9341_Set_Rotation+0x90>
 8000bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bdc <ILI9341_Set_Rotation+0x28>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000c03 	.word	0x08000c03
 8000be4:	08000c19 	.word	0x08000c19
 8000be8:	08000c2f 	.word	0x08000c2f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000bec:	2048      	movs	r0, #72	@ 0x48
 8000bee:	f7ff ff59 	bl	8000aa4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <ILI9341_Set_Rotation+0x9c>)
 8000bf4:	22f0      	movs	r2, #240	@ 0xf0
 8000bf6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <ILI9341_Set_Rotation+0xa0>)
 8000bfa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bfe:	801a      	strh	r2, [r3, #0]
			break;
 8000c00:	e021      	b.n	8000c46 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000c02:	2028      	movs	r0, #40	@ 0x28
 8000c04:	f7ff ff4e 	bl	8000aa4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <ILI9341_Set_Rotation+0x9c>)
 8000c0a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c0e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000c10:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <ILI9341_Set_Rotation+0xa0>)
 8000c12:	22f0      	movs	r2, #240	@ 0xf0
 8000c14:	801a      	strh	r2, [r3, #0]
			break;
 8000c16:	e016      	b.n	8000c46 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000c18:	2088      	movs	r0, #136	@ 0x88
 8000c1a:	f7ff ff43 	bl	8000aa4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <ILI9341_Set_Rotation+0x9c>)
 8000c20:	22f0      	movs	r2, #240	@ 0xf0
 8000c22:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <ILI9341_Set_Rotation+0xa0>)
 8000c26:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c2a:	801a      	strh	r2, [r3, #0]
			break;
 8000c2c:	e00b      	b.n	8000c46 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000c2e:	20e8      	movs	r0, #232	@ 0xe8
 8000c30:	f7ff ff38 	bl	8000aa4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <ILI9341_Set_Rotation+0x9c>)
 8000c36:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c3a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <ILI9341_Set_Rotation+0xa0>)
 8000c3e:	22f0      	movs	r2, #240	@ 0xf0
 8000c40:	801a      	strh	r2, [r3, #0]
			break;
 8000c42:	e000      	b.n	8000c46 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000c44:	bf00      	nop
	}
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000002 	.word	0x20000002
 8000c54:	20000000 	.word	0x20000000

08000c58 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c62:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <ILI9341_Enable+0x14>)
 8000c64:	f001 fe94 	bl	8002990 <HAL_GPIO_WritePin>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000c74:	f7ff fff0 	bl	8000c58 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000c78:	f7ff fed4 	bl	8000a24 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000c7c:	f7ff ff7c 	bl	8000b78 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff fef1 	bl	8000a68 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000c86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c8a:	f001 fbf5 	bl	8002478 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000c8e:	20cb      	movs	r0, #203	@ 0xcb
 8000c90:	f7ff feea 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000c94:	2039      	movs	r0, #57	@ 0x39
 8000c96:	f7ff ff05 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000c9a:	202c      	movs	r0, #44	@ 0x2c
 8000c9c:	f7ff ff02 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff feff 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000ca6:	2034      	movs	r0, #52	@ 0x34
 8000ca8:	f7ff fefc 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f7ff fef9 	bl	8000aa4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000cb2:	20cf      	movs	r0, #207	@ 0xcf
 8000cb4:	f7ff fed8 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fef3 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000cbe:	20c1      	movs	r0, #193	@ 0xc1
 8000cc0:	f7ff fef0 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000cc4:	2030      	movs	r0, #48	@ 0x30
 8000cc6:	f7ff feed 	bl	8000aa4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000cca:	20e8      	movs	r0, #232	@ 0xe8
 8000ccc:	f7ff fecc 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000cd0:	2085      	movs	r0, #133	@ 0x85
 8000cd2:	f7ff fee7 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fee4 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000cdc:	2078      	movs	r0, #120	@ 0x78
 8000cde:	f7ff fee1 	bl	8000aa4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000ce2:	20ea      	movs	r0, #234	@ 0xea
 8000ce4:	f7ff fec0 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff fedb 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fed8 	bl	8000aa4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000cf4:	20ed      	movs	r0, #237	@ 0xed
 8000cf6:	f7ff feb7 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000cfa:	2064      	movs	r0, #100	@ 0x64
 8000cfc:	f7ff fed2 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f7ff fecf 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000d06:	2012      	movs	r0, #18
 8000d08:	f7ff fecc 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000d0c:	2081      	movs	r0, #129	@ 0x81
 8000d0e:	f7ff fec9 	bl	8000aa4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000d12:	20f7      	movs	r0, #247	@ 0xf7
 8000d14:	f7ff fea8 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000d18:	2020      	movs	r0, #32
 8000d1a:	f7ff fec3 	bl	8000aa4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000d1e:	20c0      	movs	r0, #192	@ 0xc0
 8000d20:	f7ff fea2 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000d24:	2023      	movs	r0, #35	@ 0x23
 8000d26:	f7ff febd 	bl	8000aa4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000d2a:	20c1      	movs	r0, #193	@ 0xc1
 8000d2c:	f7ff fe9c 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000d30:	2010      	movs	r0, #16
 8000d32:	f7ff feb7 	bl	8000aa4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000d36:	20c5      	movs	r0, #197	@ 0xc5
 8000d38:	f7ff fe96 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000d3c:	203e      	movs	r0, #62	@ 0x3e
 8000d3e:	f7ff feb1 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000d42:	2028      	movs	r0, #40	@ 0x28
 8000d44:	f7ff feae 	bl	8000aa4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000d48:	20c7      	movs	r0, #199	@ 0xc7
 8000d4a:	f7ff fe8d 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000d4e:	2086      	movs	r0, #134	@ 0x86
 8000d50:	f7ff fea8 	bl	8000aa4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000d54:	2036      	movs	r0, #54	@ 0x36
 8000d56:	f7ff fe87 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000d5a:	2048      	movs	r0, #72	@ 0x48
 8000d5c:	f7ff fea2 	bl	8000aa4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000d60:	203a      	movs	r0, #58	@ 0x3a
 8000d62:	f7ff fe81 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000d66:	2055      	movs	r0, #85	@ 0x55
 8000d68:	f7ff fe9c 	bl	8000aa4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000d6c:	20b1      	movs	r0, #177	@ 0xb1
 8000d6e:	f7ff fe7b 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fe96 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000d78:	2018      	movs	r0, #24
 8000d7a:	f7ff fe93 	bl	8000aa4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000d7e:	20b6      	movs	r0, #182	@ 0xb6
 8000d80:	f7ff fe72 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000d84:	2008      	movs	r0, #8
 8000d86:	f7ff fe8d 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000d8a:	2082      	movs	r0, #130	@ 0x82
 8000d8c:	f7ff fe8a 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000d90:	2027      	movs	r0, #39	@ 0x27
 8000d92:	f7ff fe87 	bl	8000aa4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000d96:	20f2      	movs	r0, #242	@ 0xf2
 8000d98:	f7ff fe66 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fe81 	bl	8000aa4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000da2:	2026      	movs	r0, #38	@ 0x26
 8000da4:	f7ff fe60 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff fe7b 	bl	8000aa4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000dae:	20e0      	movs	r0, #224	@ 0xe0
 8000db0:	f7ff fe5a 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000db4:	200f      	movs	r0, #15
 8000db6:	f7ff fe75 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000dba:	2031      	movs	r0, #49	@ 0x31
 8000dbc:	f7ff fe72 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000dc0:	202b      	movs	r0, #43	@ 0x2b
 8000dc2:	f7ff fe6f 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000dc6:	200c      	movs	r0, #12
 8000dc8:	f7ff fe6c 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000dcc:	200e      	movs	r0, #14
 8000dce:	f7ff fe69 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000dd2:	2008      	movs	r0, #8
 8000dd4:	f7ff fe66 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000dd8:	204e      	movs	r0, #78	@ 0x4e
 8000dda:	f7ff fe63 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000dde:	20f1      	movs	r0, #241	@ 0xf1
 8000de0:	f7ff fe60 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000de4:	2037      	movs	r0, #55	@ 0x37
 8000de6:	f7ff fe5d 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000dea:	2007      	movs	r0, #7
 8000dec:	f7ff fe5a 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000df0:	2010      	movs	r0, #16
 8000df2:	f7ff fe57 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff fe54 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000dfc:	200e      	movs	r0, #14
 8000dfe:	f7ff fe51 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000e02:	2009      	movs	r0, #9
 8000e04:	f7ff fe4e 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fe4b 	bl	8000aa4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000e0e:	20e1      	movs	r0, #225	@ 0xe1
 8000e10:	f7ff fe2a 	bl	8000a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff fe45 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000e1a:	200e      	movs	r0, #14
 8000e1c:	f7ff fe42 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000e20:	2014      	movs	r0, #20
 8000e22:	f7ff fe3f 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f7ff fe3c 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000e2c:	2011      	movs	r0, #17
 8000e2e:	f7ff fe39 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000e32:	2007      	movs	r0, #7
 8000e34:	f7ff fe36 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000e38:	2031      	movs	r0, #49	@ 0x31
 8000e3a:	f7ff fe33 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000e3e:	20c1      	movs	r0, #193	@ 0xc1
 8000e40:	f7ff fe30 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000e44:	2048      	movs	r0, #72	@ 0x48
 8000e46:	f7ff fe2d 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000e4a:	2008      	movs	r0, #8
 8000e4c:	f7ff fe2a 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000e50:	200f      	movs	r0, #15
 8000e52:	f7ff fe27 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000e56:	200c      	movs	r0, #12
 8000e58:	f7ff fe24 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000e5c:	2031      	movs	r0, #49	@ 0x31
 8000e5e:	f7ff fe21 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000e62:	2036      	movs	r0, #54	@ 0x36
 8000e64:	f7ff fe1e 	bl	8000aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000e68:	200f      	movs	r0, #15
 8000e6a:	f7ff fe1b 	bl	8000aa4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000e6e:	2011      	movs	r0, #17
 8000e70:	f7ff fdfa 	bl	8000a68 <ILI9341_Write_Command>
HAL_Delay(120);
 8000e74:	2078      	movs	r0, #120	@ 0x78
 8000e76:	f001 faff 	bl	8002478 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000e7a:	2029      	movs	r0, #41	@ 0x29
 8000e7c:	f7ff fdf4 	bl	8000a68 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff fe97 	bl	8000bb4 <ILI9341_Set_Rotation>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e90:	b08d      	sub	sp, #52	@ 0x34
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	6039      	str	r1, [r7, #0]
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	466b      	mov	r3, sp
 8000e9c:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eaa:	d202      	bcs.n	8000eb2 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eb0:	e002      	b.n	8000eb8 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000eb2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2102      	movs	r1, #2
 8000ebc:	483e      	ldr	r0, [pc, #248]	@ (8000fb8 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000ebe:	f001 fd67 	bl	8002990 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	483c      	ldr	r0, [pc, #240]	@ (8000fb8 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000ec8:	f001 fd62 	bl	8002990 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8000ed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ed8:	460b      	mov	r3, r1
 8000eda:	3b01      	subs	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	4688      	mov	r8, r1
 8000ee2:	4699      	mov	r9, r3
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ef0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ef4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ef8:	2300      	movs	r3, #0
 8000efa:	460c      	mov	r4, r1
 8000efc:	461d      	mov	r5, r3
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	00eb      	lsls	r3, r5, #3
 8000f08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f0c:	00e2      	lsls	r2, r4, #3
 8000f0e:	1dcb      	adds	r3, r1, #7
 8000f10:	08db      	lsrs	r3, r3, #3
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	ebad 0d03 	sub.w	sp, sp, r3
 8000f18:	466b      	mov	r3, sp
 8000f1a:	3300      	adds	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f22:	e00e      	b.n	8000f42 <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f28:	4413      	add	r3, r2
 8000f2a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000f2e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f32:	3301      	adds	r3, #1
 8000f34:	88fa      	ldrh	r2, [r7, #6]
 8000f36:	b2d1      	uxtb	r1, r2
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3e:	3302      	adds	r3, #2
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3ec      	bcc.n	8000f24 <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f58:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f64:	fb01 f202 	mul.w	r2, r1, r2
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d010      	beq.n	8000f94 <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f76:	e009      	b.n	8000f8c <ILI9341_Draw_Colour_Burst+0x100>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	69b9      	ldr	r1, [r7, #24]
 8000f80:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <ILI9341_Draw_Colour_Burst+0x130>)
 8000f82:	f002 f9b1 	bl	80032e8 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f88:	3301      	adds	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3f1      	bcc.n	8000f78 <ILI9341_Draw_Colour_Burst+0xec>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	230a      	movs	r3, #10
 8000f9a:	69b9      	ldr	r1, [r7, #24]
 8000f9c:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <ILI9341_Draw_Colour_Burst+0x130>)
 8000f9e:	f002 f9a3 	bl	80032e8 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4804      	ldr	r0, [pc, #16]	@ (8000fb8 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000fa8:	f001 fcf2 	bl	8002990 <HAL_GPIO_WritePin>
 8000fac:	46b5      	mov	sp, r6
}
 8000fae:	bf00      	nop
 8000fb0:	3734      	adds	r7, #52	@ 0x34
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	200000c8 	.word	0x200000c8

08000fc0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <ILI9341_Fill_Screen+0x44>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <ILI9341_Fill_Screen+0x48>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fd81 	bl	8000ae0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <ILI9341_Fill_Screen+0x44>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <ILI9341_Fill_Screen+0x48>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff48 	bl	8000e8c <ILI9341_Draw_Colour_Burst>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000002 	.word	0x20000002
 8001008:	20000000 	.word	0x20000000

0800100c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
 8001016:	460b      	mov	r3, r1
 8001018:	80bb      	strh	r3, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800101e:	4b5b      	ldr	r3, [pc, #364]	@ (800118c <ILI9341_Draw_Pixel+0x180>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	88fa      	ldrh	r2, [r7, #6]
 8001026:	429a      	cmp	r2, r3
 8001028:	f080 80ac 	bcs.w	8001184 <ILI9341_Draw_Pixel+0x178>
 800102c:	4b58      	ldr	r3, [pc, #352]	@ (8001190 <ILI9341_Draw_Pixel+0x184>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b29b      	uxth	r3, r3
 8001032:	88ba      	ldrh	r2, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	f080 80a5 	bcs.w	8001184 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	4855      	ldr	r0, [pc, #340]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 8001040:	f001 fca6 	bl	8002990 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2101      	movs	r1, #1
 8001048:	4852      	ldr	r0, [pc, #328]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 800104a:	f001 fca1 	bl	8002990 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800104e:	202a      	movs	r0, #42	@ 0x2a
 8001050:	f7ff fcf8 	bl	8000a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001054:	2201      	movs	r2, #1
 8001056:	2102      	movs	r1, #2
 8001058:	484e      	ldr	r0, [pc, #312]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 800105a:	f001 fc99 	bl	8002990 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800105e:	2201      	movs	r2, #1
 8001060:	2101      	movs	r1, #1
 8001062:	484c      	ldr	r0, [pc, #304]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 8001064:	f001 fc94 	bl	8002990 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001068:	2200      	movs	r2, #0
 800106a:	2101      	movs	r1, #1
 800106c:	4849      	ldr	r0, [pc, #292]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 800106e:	f001 fc8f 	bl	8002990 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	b29b      	uxth	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	753b      	strb	r3, [r7, #20]
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	757b      	strb	r3, [r7, #21]
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	3301      	adds	r3, #1
 8001086:	121b      	asrs	r3, r3, #8
 8001088:	b2db      	uxtb	r3, r3
 800108a:	75bb      	strb	r3, [r7, #22]
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	3301      	adds	r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001096:	f107 0114 	add.w	r1, r7, #20
 800109a:	2301      	movs	r3, #1
 800109c:	2204      	movs	r2, #4
 800109e:	483e      	ldr	r0, [pc, #248]	@ (8001198 <ILI9341_Draw_Pixel+0x18c>)
 80010a0:	f002 f922 	bl	80032e8 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2101      	movs	r1, #1
 80010a8:	483a      	ldr	r0, [pc, #232]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 80010aa:	f001 fc71 	bl	8002990 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80010ae:	2200      	movs	r2, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	4838      	ldr	r0, [pc, #224]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 80010b4:	f001 fc6c 	bl	8002990 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	4835      	ldr	r0, [pc, #212]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 80010be:	f001 fc67 	bl	8002990 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80010c2:	202b      	movs	r0, #43	@ 0x2b
 80010c4:	f7ff fcbe 	bl	8000a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80010c8:	2201      	movs	r2, #1
 80010ca:	2102      	movs	r1, #2
 80010cc:	4831      	ldr	r0, [pc, #196]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 80010ce:	f001 fc5f 	bl	8002990 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80010d2:	2201      	movs	r2, #1
 80010d4:	2101      	movs	r1, #1
 80010d6:	482f      	ldr	r0, [pc, #188]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 80010d8:	f001 fc5a 	bl	8002990 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2101      	movs	r1, #1
 80010e0:	482c      	ldr	r0, [pc, #176]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 80010e2:	f001 fc55 	bl	8002990 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	743b      	strb	r3, [r7, #16]
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	747b      	strb	r3, [r7, #17]
 80010f6:	88bb      	ldrh	r3, [r7, #4]
 80010f8:	3301      	adds	r3, #1
 80010fa:	121b      	asrs	r3, r3, #8
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	74bb      	strb	r3, [r7, #18]
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	3301      	adds	r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800110a:	f107 0110 	add.w	r1, r7, #16
 800110e:	2301      	movs	r3, #1
 8001110:	2204      	movs	r2, #4
 8001112:	4821      	ldr	r0, [pc, #132]	@ (8001198 <ILI9341_Draw_Pixel+0x18c>)
 8001114:	f002 f8e8 	bl	80032e8 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2101      	movs	r1, #1
 800111c:	481d      	ldr	r0, [pc, #116]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 800111e:	f001 fc37 	bl	8002990 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001122:	2200      	movs	r2, #0
 8001124:	2102      	movs	r1, #2
 8001126:	481b      	ldr	r0, [pc, #108]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 8001128:	f001 fc32 	bl	8002990 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800112c:	2200      	movs	r2, #0
 800112e:	2101      	movs	r1, #1
 8001130:	4818      	ldr	r0, [pc, #96]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 8001132:	f001 fc2d 	bl	8002990 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001136:	202c      	movs	r0, #44	@ 0x2c
 8001138:	f7ff fc84 	bl	8000a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800113c:	2201      	movs	r2, #1
 800113e:	2102      	movs	r1, #2
 8001140:	4814      	ldr	r0, [pc, #80]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 8001142:	f001 fc25 	bl	8002990 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001146:	2201      	movs	r2, #1
 8001148:	2101      	movs	r1, #1
 800114a:	4812      	ldr	r0, [pc, #72]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 800114c:	f001 fc20 	bl	8002990 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2101      	movs	r1, #1
 8001154:	480f      	ldr	r0, [pc, #60]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 8001156:	f001 fc1b 	bl	8002990 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	733b      	strb	r3, [r7, #12]
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800116a:	f107 010c 	add.w	r1, r7, #12
 800116e:	2301      	movs	r3, #1
 8001170:	2202      	movs	r2, #2
 8001172:	4809      	ldr	r0, [pc, #36]	@ (8001198 <ILI9341_Draw_Pixel+0x18c>)
 8001174:	f002 f8b8 	bl	80032e8 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2101      	movs	r1, #1
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <ILI9341_Draw_Pixel+0x188>)
 800117e:	f001 fc07 	bl	8002990 <HAL_GPIO_WritePin>
 8001182:	e000      	b.n	8001186 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001184:	bf00      	nop
	
}
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000002 	.word	0x20000002
 8001190:	20000000 	.word	0x20000000
 8001194:	40010c00 	.word	0x40010c00
 8001198:	200000c8 	.word	0x200000c8

0800119c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4604      	mov	r4, r0
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	4623      	mov	r3, r4
 80011ac:	80fb      	strh	r3, [r7, #6]
 80011ae:	4603      	mov	r3, r0
 80011b0:	80bb      	strh	r3, [r7, #4]
 80011b2:	460b      	mov	r3, r1
 80011b4:	807b      	strh	r3, [r7, #2]
 80011b6:	4613      	mov	r3, r2
 80011b8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80011ba:	4b24      	ldr	r3, [pc, #144]	@ (800124c <ILI9341_Draw_Rectangle+0xb0>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	88fa      	ldrh	r2, [r7, #6]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d23d      	bcs.n	8001242 <ILI9341_Draw_Rectangle+0xa6>
 80011c6:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <ILI9341_Draw_Rectangle+0xb4>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	88ba      	ldrh	r2, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d237      	bcs.n	8001242 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80011d2:	88fa      	ldrh	r2, [r7, #6]
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a1c      	ldr	r2, [pc, #112]	@ (800124c <ILI9341_Draw_Rectangle+0xb0>)
 80011da:	8812      	ldrh	r2, [r2, #0]
 80011dc:	b292      	uxth	r2, r2
 80011de:	4293      	cmp	r3, r2
 80011e0:	dd05      	ble.n	80011ee <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <ILI9341_Draw_Rectangle+0xb0>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80011ee:	88ba      	ldrh	r2, [r7, #4]
 80011f0:	883b      	ldrh	r3, [r7, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a16      	ldr	r2, [pc, #88]	@ (8001250 <ILI9341_Draw_Rectangle+0xb4>)
 80011f6:	8812      	ldrh	r2, [r2, #0]
 80011f8:	b292      	uxth	r2, r2
 80011fa:	4293      	cmp	r3, r2
 80011fc:	dd05      	ble.n	800120a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <ILI9341_Draw_Rectangle+0xb4>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800120a:	88fa      	ldrh	r2, [r7, #6]
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	4413      	add	r3, r2
 8001210:	b29b      	uxth	r3, r3
 8001212:	3b01      	subs	r3, #1
 8001214:	b29c      	uxth	r4, r3
 8001216:	88ba      	ldrh	r2, [r7, #4]
 8001218:	883b      	ldrh	r3, [r7, #0]
 800121a:	4413      	add	r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	3b01      	subs	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	88b9      	ldrh	r1, [r7, #4]
 8001224:	88f8      	ldrh	r0, [r7, #6]
 8001226:	4622      	mov	r2, r4
 8001228:	f7ff fc5a 	bl	8000ae0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 800122c:	883b      	ldrh	r3, [r7, #0]
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	461a      	mov	r2, r3
 8001236:	8b3b      	ldrh	r3, [r7, #24]
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe26 	bl	8000e8c <ILI9341_Draw_Colour_Burst>
 8001240:	e000      	b.n	8001244 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001242:	bf00      	nop
}
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bd90      	pop	{r4, r7, pc}
 800124a:	bf00      	nop
 800124c:	20000002 	.word	0x20000002
 8001250:	20000000 	.word	0x20000000

08001254 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4623      	mov	r3, r4
 8001264:	80fb      	strh	r3, [r7, #6]
 8001266:	4603      	mov	r3, r0
 8001268:	80bb      	strh	r3, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	807b      	strh	r3, [r7, #2]
 800126e:	4613      	mov	r3, r2
 8001270:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	88fa      	ldrh	r2, [r7, #6]
 800127a:	429a      	cmp	r2, r3
 800127c:	d225      	bcs.n	80012ca <ILI9341_Draw_Horizontal_Line+0x76>
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <ILI9341_Draw_Horizontal_Line+0x84>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	88ba      	ldrh	r2, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d21f      	bcs.n	80012ca <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	4413      	add	r3, r2
 8001290:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001292:	8812      	ldrh	r2, [r2, #0]
 8001294:	b292      	uxth	r2, r2
 8001296:	4293      	cmp	r3, r2
 8001298:	dd05      	ble.n	80012a6 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <ILI9341_Draw_Horizontal_Line+0x80>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 80012a6:	88fa      	ldrh	r2, [r7, #6]
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	3b01      	subs	r3, #1
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	88bb      	ldrh	r3, [r7, #4]
 80012b4:	88b9      	ldrh	r1, [r7, #4]
 80012b6:	88f8      	ldrh	r0, [r7, #6]
 80012b8:	f7ff fc12 	bl	8000ae0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 80012bc:	887a      	ldrh	r2, [r7, #2]
 80012be:	883b      	ldrh	r3, [r7, #0]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fde2 	bl	8000e8c <ILI9341_Draw_Colour_Burst>
 80012c8:	e000      	b.n	80012cc <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012ca:	bf00      	nop
}
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000002 	.word	0x20000002
 80012d8:	20000000 	.word	0x20000000

080012dc <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4604      	mov	r4, r0
 80012e4:	4608      	mov	r0, r1
 80012e6:	4611      	mov	r1, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	4623      	mov	r3, r4
 80012ec:	80fb      	strh	r3, [r7, #6]
 80012ee:	4603      	mov	r3, r0
 80012f0:	80bb      	strh	r3, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	807b      	strh	r3, [r7, #2]
 80012f6:	4613      	mov	r3, r2
 80012f8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <ILI9341_Draw_Vertical_Line+0x80>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	88fa      	ldrh	r2, [r7, #6]
 8001302:	429a      	cmp	r2, r3
 8001304:	d225      	bcs.n	8001352 <ILI9341_Draw_Vertical_Line+0x76>
 8001306:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <ILI9341_Draw_Vertical_Line+0x84>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	88ba      	ldrh	r2, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	d21f      	bcs.n	8001352 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8001312:	88ba      	ldrh	r2, [r7, #4]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4413      	add	r3, r2
 8001318:	4a11      	ldr	r2, [pc, #68]	@ (8001360 <ILI9341_Draw_Vertical_Line+0x84>)
 800131a:	8812      	ldrh	r2, [r2, #0]
 800131c:	b292      	uxth	r2, r2
 800131e:	4293      	cmp	r3, r2
 8001320:	dd05      	ble.n	800132e <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <ILI9341_Draw_Vertical_Line+0x84>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29a      	uxth	r2, r3
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 800132e:	88ba      	ldrh	r2, [r7, #4]
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	3b01      	subs	r3, #1
 8001338:	b29b      	uxth	r3, r3
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	88b9      	ldrh	r1, [r7, #4]
 800133e:	88f8      	ldrh	r0, [r7, #6]
 8001340:	f7ff fbce 	bl	8000ae0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8001344:	887a      	ldrh	r2, [r7, #2]
 8001346:	883b      	ldrh	r3, [r7, #0]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fd9e 	bl	8000e8c <ILI9341_Draw_Colour_Burst>
 8001350:	e000      	b.n	8001354 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001352:	bf00      	nop
}
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	bf00      	nop
 800135c:	20000002 	.word	0x20000002
 8001360:	20000000 	.word	0x20000000

08001364 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	@ 0x28
 8001368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136a:	4b79      	ldr	r3, [pc, #484]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	4a78      	ldr	r2, [pc, #480]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 8001370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001374:	6193      	str	r3, [r2, #24]
 8001376:	4b76      	ldr	r3, [pc, #472]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b73      	ldr	r3, [pc, #460]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a72      	ldr	r2, [pc, #456]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b70      	ldr	r3, [pc, #448]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
//  __HAL_RCC_GPIOF_CLK_ENABLE();
//  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b6d      	ldr	r3, [pc, #436]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4a6c      	ldr	r2, [pc, #432]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6193      	str	r3, [r2, #24]
 80013a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b67      	ldr	r3, [pc, #412]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4a66      	ldr	r2, [pc, #408]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6193      	str	r3, [r2, #24]
 80013be:	4b64      	ldr	r3, [pc, #400]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ca:	4b61      	ldr	r3, [pc, #388]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a60      	ldr	r2, [pc, #384]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001550 <MX_GPIO_Init+0x1ec>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80013e2:	2304      	movs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0318 	add.w	r3, r7, #24
 80013f2:	4619      	mov	r1, r3
 80013f4:	4857      	ldr	r0, [pc, #348]	@ (8001554 <MX_GPIO_Init+0x1f0>)
 80013f6:	f001 f947 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80013fa:	2368      	movs	r3, #104	@ 0x68
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	4619      	mov	r1, r3
 8001410:	4850      	ldr	r0, [pc, #320]	@ (8001554 <MX_GPIO_Init+0x1f0>)
 8001412:	f001 f939 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001416:	2310      	movs	r3, #16
 8001418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141e:	2301      	movs	r3, #1
 8001420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4619      	mov	r1, r3
 8001428:	484a      	ldr	r0, [pc, #296]	@ (8001554 <MX_GPIO_Init+0x1f0>)
 800142a:	f001 f92d 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800142e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	4619      	mov	r1, r3
 8001442:	4845      	ldr	r0, [pc, #276]	@ (8001558 <MX_GPIO_Init+0x1f4>)
 8001444:	f001 f920 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001448:	2332      	movs	r3, #50	@ 0x32
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4619      	mov	r1, r3
 800145e:	483e      	ldr	r0, [pc, #248]	@ (8001558 <MX_GPIO_Init+0x1f4>)
 8001460:	f001 f912 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001464:	2386      	movs	r3, #134	@ 0x86
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	4619      	mov	r1, r3
 800147a:	4838      	ldr	r0, [pc, #224]	@ (800155c <MX_GPIO_Init+0x1f8>)
 800147c:	f001 f904 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	4619      	mov	r1, r3
 8001498:	4831      	ldr	r0, [pc, #196]	@ (8001560 <MX_GPIO_Init+0x1fc>)
 800149a:	f001 f8f5 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800149e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2302      	movs	r3, #2
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0318 	add.w	r3, r7, #24
 80014b4:	4619      	mov	r1, r3
 80014b6:	482a      	ldr	r0, [pc, #168]	@ (8001560 <MX_GPIO_Init+0x1fc>)
 80014b8:	f001 f8e6 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014bc:	2340      	movs	r3, #64	@ 0x40
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2302      	movs	r3, #2
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
  //HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  //HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80014d8:	f240 4303 	movw	r3, #1027	@ 0x403
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	4619      	mov	r1, r3
 80014f0:	4819      	ldr	r0, [pc, #100]	@ (8001558 <MX_GPIO_Init+0x1f4>)
 80014f2:	f001 f8c9 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014f6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  //GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4619      	mov	r1, r3
 800150e:	4813      	ldr	r0, [pc, #76]	@ (800155c <MX_GPIO_Init+0x1f8>)
 8001510:	f001 f8ba 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001514:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
//  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
//  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2168      	movs	r1, #104	@ 0x68
 800152a:	480a      	ldr	r0, [pc, #40]	@ (8001554 <MX_GPIO_Init+0x1f0>)
 800152c:	f001 fa30 	bl	8002990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001536:	480a      	ldr	r0, [pc, #40]	@ (8001560 <MX_GPIO_Init+0x1fc>)
 8001538:	f001 fa2a 	bl	8002990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f240 4103 	movw	r1, #1027	@ 0x403
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_GPIO_Init+0x1f4>)
 8001544:	f001 fa24 	bl	8002990 <HAL_GPIO_WritePin>

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	40011800 	.word	0x40011800
 8001558:	40011000 	.word	0x40011000
 800155c:	40010800 	.word	0x40010800
 8001560:	40010c00 	.word	0x40010c00

08001564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b0b1      	sub	sp, #196	@ 0xc4
 8001568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156a:	f000 ff23 	bl	80023b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156e:	f000 fceb 	bl	8001f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001572:	f000 fd4f 	bl	8002014 <MX_GPIO_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 8001576:	f000 fd23 	bl	8001fc0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t dataT[14]="Hola oscar 3\n\r";
 800157a:	4bc2      	ldr	r3, [pc, #776]	@ (8001884 <main+0x320>)
 800157c:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001582:	c407      	stmia	r4!, {r0, r1, r2}
 8001584:	8023      	strh	r3, [r4, #0]
//  uint8_t dataR[1]="";

  /* USER CODE END 2 */
	ILI9341_Init();//initial driver setup to drive ili9341
 8001586:	f7ff fb73 	bl	8000c70 <ILI9341_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1, dataT,14,HAL_MAX_DELAY);
 800158a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	220e      	movs	r2, #14
 8001594:	48bc      	ldr	r0, [pc, #752]	@ (8001888 <main+0x324>)
 8001596:	f002 f8e1 	bl	800375c <HAL_UART_Transmit>
		ILI9341_Fill_Screen(WHITE);
 800159a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800159e:	f7ff fd0f 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80015a2:	2003      	movs	r0, #3
 80015a4:	f7ff fb06 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);
 80015a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	2301      	movs	r3, #1
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	220a      	movs	r2, #10
 80015b6:	210a      	movs	r1, #10
 80015b8:	48b4      	ldr	r0, [pc, #720]	@ (800188c <main+0x328>)
 80015ba:	f7ff fa03 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 80015be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015c2:	f000 ff59 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 80015c6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80015ca:	f7ff fcf9 	bl	8000fc0 <ILI9341_Fill_Screen>

		uint32_t Timer_Counter = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		for(uint32_t j = 0; j < 2; j++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015da:	e018      	b.n	800160e <main+0xaa>
		{
//			HAL_TIM_Base_Start(&htim1);
			for(uint16_t i = 0; i < 10; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80015e2:	e00b      	b.n	80015fc <main+0x98>
			{
				ILI9341_Fill_Screen(WHITE);
 80015e4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80015e8:	f7ff fcea 	bl	8000fc0 <ILI9341_Fill_Screen>
				ILI9341_Fill_Screen(BLACK);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fce7 	bl	8000fc0 <ILI9341_Fill_Screen>
			for(uint16_t i = 0; i < 10; i++)
 80015f2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80015f6:	3301      	adds	r3, #1
 80015f8:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80015fc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001600:	2b09      	cmp	r3, #9
 8001602:	d9ef      	bls.n	80015e4 <main+0x80>
		for(uint32_t j = 0; j < 2; j++)
 8001604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001608:	3301      	adds	r3, #1
 800160a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800160e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001612:	2b01      	cmp	r3, #1
 8001614:	d9e2      	bls.n	80015dc <main+0x78>
			//20.000 per second!
//			HAL_TIM_Base_Stop(&htim1);
//			Timer_Counter += __HAL_TIM_GET_COUNTER(&htim1);
//			__HAL_TIM_SET_COUNTER(&htim1, 0);
		}
		Timer_Counter /= 2;
 8001616:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		char counter_buff[30];
		ILI9341_Fill_Screen(WHITE);
 8001620:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001624:	f7ff fccc 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001628:	2003      	movs	r0, #3
 800162a:	f7ff fac3 	bl	8000bb4 <ILI9341_Set_Rotation>
		sprintf(counter_buff, "Timer counter value: ");
 800162e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001632:	4997      	ldr	r1, [pc, #604]	@ (8001890 <main+0x32c>)
 8001634:	4618      	mov	r0, r3
 8001636:	f002 fa11 	bl	8003a5c <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 10, BLACK, 1, WHITE);
 800163a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800163e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	2301      	movs	r3, #1
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	220a      	movs	r2, #10
 800164c:	210a      	movs	r1, #10
 800164e:	f7ff f9b9 	bl	80009c4 <ILI9341_Draw_Text>

//		double seconds_passed = 2*((float)Timer_Counter / 20000);
		sprintf(counter_buff, "Time: .3f Sec");
 8001652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001656:	498f      	ldr	r1, [pc, #572]	@ (8001894 <main+0x330>)
 8001658:	4618      	mov	r0, r3
 800165a:	f002 f9ff 	bl	8003a5c <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 30, BLACK, 2, WHITE);
 800165e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001662:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2302      	movs	r3, #2
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	221e      	movs	r2, #30
 8001670:	210a      	movs	r1, #10
 8001672:	f7ff f9a7 	bl	80009c4 <ILI9341_Draw_Text>

//		double timer_float = 20/(((float)Timer_Counter)/20000);	//Frames per sec

		sprintf(counter_buff, "FPS:  .2f");
 8001676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167a:	4987      	ldr	r1, [pc, #540]	@ (8001898 <main+0x334>)
 800167c:	4618      	mov	r0, r3
 800167e:	f002 f9ed 	bl	8003a5c <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 50, BLACK, 2, WHITE);
 8001682:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001686:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2302      	movs	r3, #2
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	2232      	movs	r2, #50	@ 0x32
 8001694:	210a      	movs	r1, #10
 8001696:	f7ff f995 	bl	80009c4 <ILI9341_Draw_Text>
//		double MB_PS = timer_float*240*320*2/1000000;
		sprintf(counter_buff, "MB/S: .2f");
 800169a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800169e:	497f      	ldr	r1, [pc, #508]	@ (800189c <main+0x338>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 f9db 	bl	8003a5c <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 70, BLACK, 2, WHITE);
 80016a6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80016aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2302      	movs	r3, #2
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	2246      	movs	r2, #70	@ 0x46
 80016b8:	210a      	movs	r1, #10
 80016ba:	f7ff f983 	bl	80009c4 <ILI9341_Draw_Text>
//		double SPI_utilized_percentage = (MB_PS/(6.25 ))*100;		//50mbits / 8 bits
		sprintf(counter_buff, "SPI Utilized: .2f");
 80016be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c2:	4977      	ldr	r1, [pc, #476]	@ (80018a0 <main+0x33c>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 f9c9 	bl	8003a5c <siprintf>
		ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
 80016ca:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80016ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	2302      	movs	r3, #2
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2300      	movs	r3, #0
 80016da:	225a      	movs	r2, #90	@ 0x5a
 80016dc:	210a      	movs	r1, #10
 80016de:	f7ff f971 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(10000);
 80016e2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80016e6:	f000 fec7 	bl	8002478 <HAL_Delay>
		static uint16_t y = 0;

		char Temp_Buffer_text[40];

//----------------------------------------------------------COUNTING MULTIPLE SEGMENTS
		ILI9341_Fill_Screen(WHITE);
 80016ea:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80016ee:	f7ff fc67 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80016f2:	2003      	movs	r0, #3
 80016f4:	f7ff fa5e 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Counting multiple segments at once", 10, 10, BLACK, 1, WHITE);
 80016f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	2301      	movs	r3, #1
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	220a      	movs	r2, #10
 8001706:	210a      	movs	r1, #10
 8001708:	4866      	ldr	r0, [pc, #408]	@ (80018a4 <main+0x340>)
 800170a:	f7ff f95b 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 800170e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001712:	f000 feb1 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8001716:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800171a:	f7ff fc51 	bl	8000fc0 <ILI9341_Fill_Screen>


		for(uint16_t i = 0; i <= 10; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 8001724:	e087      	b.n	8001836 <main+0x2d2>
		{
		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8001726:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 800172a:	463b      	mov	r3, r7
 800172c:	495e      	ldr	r1, [pc, #376]	@ (80018a8 <main+0x344>)
 800172e:	4618      	mov	r0, r3
 8001730:	f002 f994 	bl	8003a5c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 2, WHITE);
 8001734:	4638      	mov	r0, r7
 8001736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2300      	movs	r3, #0
 8001742:	220a      	movs	r2, #10
 8001744:	210a      	movs	r1, #10
 8001746:	f7ff f93d 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 30, BLUE, 2, WHITE);
 800174a:	4638      	mov	r0, r7
 800174c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	2302      	movs	r3, #2
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	231f      	movs	r3, #31
 8001758:	221e      	movs	r2, #30
 800175a:	210a      	movs	r1, #10
 800175c:	f7ff f932 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 50, RED, 2, WHITE);
 8001760:	4638      	mov	r0, r7
 8001762:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	2302      	movs	r3, #2
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001770:	2232      	movs	r2, #50	@ 0x32
 8001772:	210a      	movs	r1, #10
 8001774:	f7ff f926 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 70, GREEN, 2, WHITE);
 8001778:	4638      	mov	r0, r7
 800177a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	2302      	movs	r3, #2
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001788:	2246      	movs	r2, #70	@ 0x46
 800178a:	210a      	movs	r1, #10
 800178c:	f7ff f91a 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 90, BLACK, 2, WHITE);
 8001790:	4638      	mov	r0, r7
 8001792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	2302      	movs	r3, #2
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	225a      	movs	r2, #90	@ 0x5a
 80017a0:	210a      	movs	r1, #10
 80017a2:	f7ff f90f 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 110, BLUE, 2, WHITE);
 80017a6:	4638      	mov	r0, r7
 80017a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2302      	movs	r3, #2
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	231f      	movs	r3, #31
 80017b4:	226e      	movs	r2, #110	@ 0x6e
 80017b6:	210a      	movs	r1, #10
 80017b8:	f7ff f904 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 130, RED, 2, WHITE);
 80017bc:	4638      	mov	r0, r7
 80017be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017cc:	2282      	movs	r2, #130	@ 0x82
 80017ce:	210a      	movs	r1, #10
 80017d0:	f7ff f8f8 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 150, GREEN, 2, WHITE);
 80017d4:	4638      	mov	r0, r7
 80017d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2302      	movs	r3, #2
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80017e4:	2296      	movs	r2, #150	@ 0x96
 80017e6:	210a      	movs	r1, #10
 80017e8:	f7ff f8ec 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 170, WHITE, 2, BLACK);
 80017ec:	4638      	mov	r0, r7
 80017ee:	2300      	movs	r3, #0
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	2302      	movs	r3, #2
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017fa:	22aa      	movs	r2, #170	@ 0xaa
 80017fc:	210a      	movs	r1, #10
 80017fe:	f7ff f8e1 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 190, BLUE, 2, BLACK);
 8001802:	4638      	mov	r0, r7
 8001804:	2300      	movs	r3, #0
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2302      	movs	r3, #2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	231f      	movs	r3, #31
 800180e:	22be      	movs	r2, #190	@ 0xbe
 8001810:	210a      	movs	r1, #10
 8001812:	f7ff f8d7 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 210, RED, 2, BLACK);
 8001816:	4638      	mov	r0, r7
 8001818:	2300      	movs	r3, #0
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001824:	22d2      	movs	r2, #210	@ 0xd2
 8001826:	210a      	movs	r1, #10
 8001828:	f7ff f8cc 	bl	80009c4 <ILI9341_Draw_Text>
		for(uint16_t i = 0; i <= 10; i++)
 800182c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8001830:	3301      	adds	r3, #1
 8001832:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 8001836:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800183a:	2b0a      	cmp	r3, #10
 800183c:	f67f af73 	bls.w	8001726 <main+0x1c2>
		}

		HAL_Delay(1000);
 8001840:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001844:	f000 fe18 	bl	8002478 <HAL_Delay>

//----------------------------------------------------------COUNTING SINGLE SEGMENT
		ILI9341_Fill_Screen(WHITE);
 8001848:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800184c:	f7ff fbb8 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001850:	2003      	movs	r0, #3
 8001852:	f7ff f9af 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Counting single segment", 10, 10, BLACK, 1, WHITE);
 8001856:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	2301      	movs	r3, #1
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2300      	movs	r3, #0
 8001862:	220a      	movs	r2, #10
 8001864:	210a      	movs	r1, #10
 8001866:	4811      	ldr	r0, [pc, #68]	@ (80018ac <main+0x348>)
 8001868:	f7ff f8ac 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 800186c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001870:	f000 fe02 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8001874:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001878:	f7ff fba2 	bl	8000fc0 <ILI9341_Fill_Screen>

		for(uint16_t i = 0; i <= 100; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8001882:	e02c      	b.n	80018de <main+0x37a>
 8001884:	08004550 	.word	0x08004550
 8001888:	2000007c 	.word	0x2000007c
 800188c:	080043d4 	.word	0x080043d4
 8001890:	080043f0 	.word	0x080043f0
 8001894:	08004408 	.word	0x08004408
 8001898:	08004418 	.word	0x08004418
 800189c:	08004424 	.word	0x08004424
 80018a0:	08004430 	.word	0x08004430
 80018a4:	08004444 	.word	0x08004444
 80018a8:	08004468 	.word	0x08004468
 80018ac:	08004478 	.word	0x08004478
		{
		sprintf(Temp_Buffer_text, "Counting: %d", i);
 80018b0:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80018b4:	463b      	mov	r3, r7
 80018b6:	49b1      	ldr	r1, [pc, #708]	@ (8001b7c <main+0x618>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 f8cf 	bl	8003a5c <siprintf>
		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 3, WHITE);
 80018be:	4638      	mov	r0, r7
 80018c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	2303      	movs	r3, #3
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2300      	movs	r3, #0
 80018cc:	220a      	movs	r2, #10
 80018ce:	210a      	movs	r1, #10
 80018d0:	f7ff f878 	bl	80009c4 <ILI9341_Draw_Text>
		for(uint16_t i = 0; i <= 100; i++)
 80018d4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80018d8:	3301      	adds	r3, #1
 80018da:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80018de:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80018e2:	2b64      	cmp	r3, #100	@ 0x64
 80018e4:	d9e4      	bls.n	80018b0 <main+0x34c>
		}

		HAL_Delay(1000);
 80018e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ea:	f000 fdc5 	bl	8002478 <HAL_Delay>

//----------------------------------------------------------ALIGNMENT TEST
		ILI9341_Fill_Screen(WHITE);
 80018ee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80018f2:	f7ff fb65 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80018f6:	2003      	movs	r0, #3
 80018f8:	f7ff f95c 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Rectangle alignment check", 10, 10, BLACK, 1, WHITE);
 80018fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	2301      	movs	r3, #1
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	220a      	movs	r2, #10
 800190a:	210a      	movs	r1, #10
 800190c:	489c      	ldr	r0, [pc, #624]	@ (8001b80 <main+0x61c>)
 800190e:	f7ff f859 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8001912:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001916:	f000 fdaf 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 800191a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800191e:	f7ff fb4f 	bl	8000fc0 <ILI9341_Fill_Screen>

		ILI9341_Draw_Hollow_Rectangle_Coord(50, 50, 100, 100, BLACK);
 8001922:	2300      	movs	r3, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2364      	movs	r3, #100	@ 0x64
 8001928:	2264      	movs	r2, #100	@ 0x64
 800192a:	2132      	movs	r1, #50	@ 0x32
 800192c:	2032      	movs	r0, #50	@ 0x32
 800192e:	f7fe fecf 	bl	80006d0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 50, 50, BLACK);
 8001932:	2300      	movs	r3, #0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2332      	movs	r3, #50	@ 0x32
 8001938:	2232      	movs	r2, #50	@ 0x32
 800193a:	2114      	movs	r1, #20
 800193c:	2014      	movs	r0, #20
 800193e:	f7fe ff48 	bl	80007d2 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 19, 19, BLACK);
 8001942:	2300      	movs	r3, #0
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2313      	movs	r3, #19
 8001948:	2213      	movs	r2, #19
 800194a:	210a      	movs	r1, #10
 800194c:	200a      	movs	r0, #10
 800194e:	f7fe febf 	bl	80006d0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		HAL_Delay(1000);
 8001952:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001956:	f000 fd8f 	bl	8002478 <HAL_Delay>

//----------------------------------------------------------LINES EXAMPLE
		ILI9341_Fill_Screen(WHITE);
 800195a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800195e:	f7ff fb2f 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001962:	2003      	movs	r0, #3
 8001964:	f7ff f926 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2301      	movs	r3, #1
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	220a      	movs	r2, #10
 8001976:	210a      	movs	r1, #10
 8001978:	4882      	ldr	r0, [pc, #520]	@ (8001b84 <main+0x620>)
 800197a:	f7ff f823 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Horizontal and Vertical lines", 10, 20, BLACK, 1, WHITE);
 800197e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	2301      	movs	r3, #1
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	2214      	movs	r2, #20
 800198c:	210a      	movs	r1, #10
 800198e:	487e      	ldr	r0, [pc, #504]	@ (8001b88 <main+0x624>)
 8001990:	f7ff f818 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8001994:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001998:	f000 fd6e 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 800199c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80019a0:	f7ff fb0e 	bl	8000fc0 <ILI9341_Fill_Screen>

		for(uint32_t i = 0; i < 30000; i++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80019aa:	e044      	b.n	8001a36 <main+0x4d2>
		{
			uint32_t random_num = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	663b      	str	r3, [r7, #96]	@ 0x60
			uint16_t xr = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
			uint16_t yr = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
			uint16_t radiusr = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			uint16_t colourr = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
//			random_num = HAL_RNG_GetRandomNumber(&hrng);
			xr = random_num;
 80019c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019ca:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
//			random_num = HAL_RNG_GetRandomNumber(&hrng);
			yr = random_num;
 80019ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019d0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	//		random_num = HAL_RNG_GetRandomNumber(&hrng);
			radiusr = random_num;
 80019d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019d6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
		//	random_num = HAL_RNG_GetRandomNumber(&hrng);
			colourr = random_num;
 80019da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019dc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

			xr &= 0x01FF;
 80019e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80019e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
			yr &= 0x01FF;
 80019ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80019f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
			radiusr &= 0x001F;
 80019f8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			//ili9341_drawpixel(xr, yr, WHITE);
			ILI9341_Draw_Horizontal_Line(xr, yr, radiusr, colourr);
 8001a04:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001a08:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8001a0c:	f8b7 105c 	ldrh.w	r1, [r7, #92]	@ 0x5c
 8001a10:	f8b7 005e 	ldrh.w	r0, [r7, #94]	@ 0x5e
 8001a14:	f7ff fc1e 	bl	8001254 <ILI9341_Draw_Horizontal_Line>
			ILI9341_Draw_Vertical_Line(xr, yr, radiusr, colourr);
 8001a18:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001a1c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8001a20:	f8b7 105c 	ldrh.w	r1, [r7, #92]	@ 0x5c
 8001a24:	f8b7 005e 	ldrh.w	r0, [r7, #94]	@ 0x5e
 8001a28:	f7ff fc58 	bl	80012dc <ILI9341_Draw_Vertical_Line>
		for(uint32_t i = 0; i < 30000; i++)
 8001a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a30:	3301      	adds	r3, #1
 8001a32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a3a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d9b4      	bls.n	80019ac <main+0x448>
		}

		HAL_Delay(1000);
 8001a42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a46:	f000 fd17 	bl	8002478 <HAL_Delay>

//----------------------------------------------------------HOLLOW CIRCLES EXAMPLE
		ILI9341_Fill_Screen(WHITE);
 8001a4a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a4e:	f7ff fab7 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001a52:	2003      	movs	r0, #3
 8001a54:	f7ff f8ae 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	220a      	movs	r2, #10
 8001a66:	210a      	movs	r1, #10
 8001a68:	4846      	ldr	r0, [pc, #280]	@ (8001b84 <main+0x620>)
 8001a6a:	f7fe ffab 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Circles", 10, 20, BLACK, 1, WHITE);
 8001a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	2301      	movs	r3, #1
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2214      	movs	r2, #20
 8001a7c:	210a      	movs	r1, #10
 8001a7e:	4843      	ldr	r0, [pc, #268]	@ (8001b8c <main+0x628>)
 8001a80:	f7fe ffa0 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8001a84:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a88:	f000 fcf6 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8001a8c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a90:	f7ff fa96 	bl	8000fc0 <ILI9341_Fill_Screen>


		for(uint32_t i = 0; i < 3000; i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001a9a:	e03c      	b.n	8001b16 <main+0x5b2>
		{
			uint32_t random_num = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
			uint16_t xr = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
			uint16_t yr = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
			uint16_t radiusr = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
			uint16_t colourr = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
//			random_num = HAL_RNG_GetRandomNumber(&hrng);
			xr = random_num;
 8001ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001aba:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	//		random_num = HAL_RNG_GetRandomNumber(&hrng);
			yr = random_num;
 8001abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ac0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		//	random_num = HAL_RNG_GetRandomNumber(&hrng);
			radiusr = random_num;
 8001ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ac6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
			//random_num = HAL_RNG_GetRandomNumber(&hrng);
			colourr = random_num;
 8001aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001acc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

			xr &= 0x01FF;
 8001ad0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
			yr &= 0x01FF;
 8001adc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8001ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae4:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
			radiusr &= 0x001F;
 8001ae8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
			//ili9341_drawpixel(xr, yr, WHITE);
			ILI9341_Draw_Hollow_Circle(xr, yr, radiusr*2, colourr);
 8001af4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001b00:	f8b7 1068 	ldrh.w	r1, [r7, #104]	@ 0x68
 8001b04:	f8b7 006a 	ldrh.w	r0, [r7, #106]	@ 0x6a
 8001b08:	f7fe fca4 	bl	8000454 <ILI9341_Draw_Hollow_Circle>
		for(uint32_t i = 0; i < 3000; i++)
 8001b0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b10:	3301      	adds	r3, #1
 8001b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b1a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d9bc      	bls.n	8001a9c <main+0x538>
		}
		HAL_Delay(1000);
 8001b22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b26:	f000 fca7 	bl	8002478 <HAL_Delay>

//----------------------------------------------------------FILLED CIRCLES EXAMPLE
		ILI9341_Fill_Screen(WHITE);
 8001b2a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b2e:	f7ff fa47 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001b32:	2003      	movs	r0, #3
 8001b34:	f7ff f83e 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001b38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2300      	movs	r3, #0
 8001b44:	220a      	movs	r2, #10
 8001b46:	210a      	movs	r1, #10
 8001b48:	480e      	ldr	r0, [pc, #56]	@ (8001b84 <main+0x620>)
 8001b4a:	f7fe ff3b 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8001b4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	2301      	movs	r3, #1
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2214      	movs	r2, #20
 8001b5c:	210a      	movs	r1, #10
 8001b5e:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <main+0x62c>)
 8001b60:	f7fe ff30 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8001b64:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b68:	f000 fc86 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8001b6c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b70:	f7ff fa26 	bl	8000fc0 <ILI9341_Fill_Screen>

		for(uint32_t i = 0; i < 1000; i++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b7a:	e048      	b.n	8001c0e <main+0x6aa>
 8001b7c:	08004468 	.word	0x08004468
 8001b80:	08004490 	.word	0x08004490
 8001b84:	080044ac 	.word	0x080044ac
 8001b88:	080044c8 	.word	0x080044c8
 8001b8c:	080044e8 	.word	0x080044e8
 8001b90:	080044f0 	.word	0x080044f0
		{
			uint32_t random_num = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	67bb      	str	r3, [r7, #120]	@ 0x78
			uint16_t xr = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
			uint16_t yr = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
			uint16_t radiusr = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
			uint16_t colourr = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
//			random_num = HAL_RNG_GetRandomNumber(&hrng);
			xr = random_num;
 8001bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bb2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	//		random_num = HAL_RNG_GetRandomNumber(&hrng);
			yr = random_num;
 8001bb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bb8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		//	random_num = HAL_RNG_GetRandomNumber(&hrng);
			radiusr = random_num;
 8001bbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bbe:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
			//random_num = HAL_RNG_GetRandomNumber(&hrng);
			colourr = random_num;
 8001bc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bc4:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

			xr &= 0x01FF;
 8001bc8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
			yr &= 0x01FF;
 8001bd4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bdc:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
			radiusr &= 0x001F;
 8001be0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
			//ili9341_drawpixel(xr, yr, WHITE);
			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 8001bec:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8001bf8:	f8b7 1074 	ldrh.w	r1, [r7, #116]	@ 0x74
 8001bfc:	f8b7 0076 	ldrh.w	r0, [r7, #118]	@ 0x76
 8001c00:	f7fe fcde 	bl	80005c0 <ILI9341_Draw_Filled_Circle>
		for(uint32_t i = 0; i < 1000; i++)
 8001c04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c16:	d3bd      	bcc.n	8001b94 <main+0x630>
		}
		HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c1c:	f000 fc2c 	bl	8002478 <HAL_Delay>

//----------------------------------------------------------HOLLOW RECTANGLES EXAMPLE
		ILI9341_Fill_Screen(WHITE);
 8001c20:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c24:	f7ff f9cc 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f7fe ffc3 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001c2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	2301      	movs	r3, #1
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	220a      	movs	r2, #10
 8001c3c:	210a      	movs	r1, #10
 8001c3e:	48bb      	ldr	r0, [pc, #748]	@ (8001f2c <main+0x9c8>)
 8001c40:	f7fe fec0 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Rectangles", 10, 20, BLACK, 1, WHITE);
 8001c44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2214      	movs	r2, #20
 8001c52:	210a      	movs	r1, #10
 8001c54:	48b6      	ldr	r0, [pc, #728]	@ (8001f30 <main+0x9cc>)
 8001c56:	f7fe feb5 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8001c5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c5e:	f000 fc0b 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8001c62:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c66:	f7ff f9ab 	bl	8000fc0 <ILI9341_Fill_Screen>

		for(uint32_t i = 0; i < 20000; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001c70:	e04c      	b.n	8001d0c <main+0x7a8>
		{
			uint32_t random_num = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			uint16_t xr = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
			uint16_t yr = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
			uint16_t radiusr = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
			uint16_t colourr = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
//			random_num = HAL_RNG_GetRandomNumber(&hrng);
			xr = random_num;
 8001c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c94:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	//		random_num = HAL_RNG_GetRandomNumber(&hrng);
			yr = random_num;
 8001c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c9c:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
		//	random_num = HAL_RNG_GetRandomNumber(&hrng);
			radiusr = random_num;
 8001ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ca4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
			//random_num = HAL_RNG_GetRandomNumber(&hrng);
			colourr = random_num;
 8001ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cac:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

			xr &= 0x01FF;
 8001cb0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
			yr &= 0x01FF;
 8001cbc:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc4:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
			radiusr &= 0x001F;
 8001cc8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
			//ili9341_drawpixel(xr, yr, WHITE);
			ILI9341_Draw_Hollow_Rectangle_Coord(xr, yr, xr+radiusr, yr+radiusr, colourr);
 8001cd4:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8001cd8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001cdc:	4413      	add	r3, r2
 8001cde:	b29c      	uxth	r4, r3
 8001ce0:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8001ce4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 8001cf0:	f8b7 0082 	ldrh.w	r0, [r7, #130]	@ 0x82
 8001cf4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	f7fe fce7 	bl	80006d0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		for(uint32_t i = 0; i < 20000; i++)
 8001d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d06:	3301      	adds	r3, #1
 8001d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d10:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d9ac      	bls.n	8001c72 <main+0x70e>
		}
		HAL_Delay(1000);
 8001d18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d1c:	f000 fbac 	bl	8002478 <HAL_Delay>

//----------------------------------------------------------FILLED RECTANGLES EXAMPLE
		ILI9341_Fill_Screen(WHITE);
 8001d20:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d24:	f7ff f94c 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f7fe ff43 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001d2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	2301      	movs	r3, #1
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	220a      	movs	r2, #10
 8001d3c:	210a      	movs	r1, #10
 8001d3e:	487b      	ldr	r0, [pc, #492]	@ (8001f2c <main+0x9c8>)
 8001d40:	f7fe fe40 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Filled Rectangles", 10, 20, BLACK, 1, WHITE);
 8001d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2214      	movs	r2, #20
 8001d52:	210a      	movs	r1, #10
 8001d54:	4877      	ldr	r0, [pc, #476]	@ (8001f34 <main+0x9d0>)
 8001d56:	f7fe fe35 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8001d5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d5e:	f000 fb8b 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8001d62:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d66:	f7ff f92b 	bl	8000fc0 <ILI9341_Fill_Screen>

		for(uint32_t i = 0; i < 20000; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d70:	e043      	b.n	8001dfa <main+0x896>
		{
			uint32_t random_num = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			uint16_t xr = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
			uint16_t yr = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
			uint16_t radiusr = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
			uint16_t colourr = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
//			random_num = HAL_RNG_GetRandomNumber(&hrng);
			xr = random_num;
 8001d90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d94:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	//		random_num = HAL_RNG_GetRandomNumber(&hrng);
			yr = random_num;
 8001d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d9c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
		//	random_num = HAL_RNG_GetRandomNumber(&hrng);
			radiusr = random_num;
 8001da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001da4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
			//random_num = HAL_RNG_GetRandomNumber(&hrng);
			colourr = random_num;
 8001da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dac:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

			xr &= 0x01FF;
 8001db0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
			yr &= 0x01FF;
 8001dbc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8001dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
			radiusr &= 0x001F;
 8001dc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
			//ili9341_drawpixel(xr, yr, WHITE);
			ILI9341_Draw_Rectangle(xr, yr, radiusr, radiusr, colourr);
 8001dd4:	f8b7 408a 	ldrh.w	r4, [r7, #138]	@ 0x8a
 8001dd8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8001ddc:	f8b7 108c 	ldrh.w	r1, [r7, #140]	@ 0x8c
 8001de0:	f8b7 008e 	ldrh.w	r0, [r7, #142]	@ 0x8e
 8001de4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	4623      	mov	r3, r4
 8001dec:	f7ff f9d6 	bl	800119c <ILI9341_Draw_Rectangle>
		for(uint32_t i = 0; i < 20000; i++)
 8001df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001df4:	3301      	adds	r3, #1
 8001df6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dfe:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d9b5      	bls.n	8001d72 <main+0x80e>
		}
		HAL_Delay(1000);
 8001e06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e0a:	f000 fb35 	bl	8002478 <HAL_Delay>

//----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE

		ILI9341_Fill_Screen(WHITE);
 8001e0e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e12:	f7ff f8d5 	bl	8000fc0 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f7fe fecc 	bl	8000bb4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Slow draw by selecting", 10, 10, BLACK, 1, WHITE);
 8001e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2301      	movs	r3, #1
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	220a      	movs	r2, #10
 8001e2a:	210a      	movs	r1, #10
 8001e2c:	4842      	ldr	r0, [pc, #264]	@ (8001f38 <main+0x9d4>)
 8001e2e:	f7fe fdc9 	bl	80009c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("and adressing pixels", 10, 20, BLACK, 1, WHITE);
 8001e32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2214      	movs	r2, #20
 8001e40:	210a      	movs	r1, #10
 8001e42:	483e      	ldr	r0, [pc, #248]	@ (8001f3c <main+0x9d8>)
 8001e44:	f7fe fdbe 	bl	80009c4 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 8001e48:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e4c:	f000 fb14 	bl	8002478 <HAL_Delay>
		ILI9341_Fill_Screen(WHITE);
 8001e50:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e54:	f7ff f8b4 	bl	8000fc0 <ILI9341_Fill_Screen>


		x = 0;
 8001e58:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <main+0x9dc>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	801a      	strh	r2, [r3, #0]
		y = 0;
 8001e5e:	4b39      	ldr	r3, [pc, #228]	@ (8001f44 <main+0x9e0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	801a      	strh	r2, [r3, #0]
		while (y < 240)
 8001e64:	e026      	b.n	8001eb4 <main+0x950>
		{
		while ((x < 320) && (y < 240))
		{

			if(x % 2)
 8001e66:	4b36      	ldr	r3, [pc, #216]	@ (8001f40 <main+0x9dc>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <main+0x920>
			{
				ILI9341_Draw_Pixel(x, y, BLACK);
 8001e74:	4b32      	ldr	r3, [pc, #200]	@ (8001f40 <main+0x9dc>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	4a32      	ldr	r2, [pc, #200]	@ (8001f44 <main+0x9e0>)
 8001e7a:	8811      	ldrh	r1, [r2, #0]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f8c4 	bl	800100c <ILI9341_Draw_Pixel>
			}

			x++;
 8001e84:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <main+0x9dc>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <main+0x9dc>)
 8001e8e:	801a      	strh	r2, [r3, #0]
		while ((x < 320) && (y < 240))
 8001e90:	4b2b      	ldr	r3, [pc, #172]	@ (8001f40 <main+0x9dc>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e98:	d203      	bcs.n	8001ea2 <main+0x93e>
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f44 <main+0x9e0>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	2bef      	cmp	r3, #239	@ 0xef
 8001ea0:	d9e1      	bls.n	8001e66 <main+0x902>
		}

			y++;
 8001ea2:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <main+0x9e0>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <main+0x9e0>)
 8001eac:	801a      	strh	r2, [r3, #0]
			x = 0;
 8001eae:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <main+0x9dc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	801a      	strh	r2, [r3, #0]
		while (y < 240)
 8001eb4:	4b23      	ldr	r3, [pc, #140]	@ (8001f44 <main+0x9e0>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	2bef      	cmp	r3, #239	@ 0xef
 8001eba:	d9e9      	bls.n	8001e90 <main+0x92c>
		}

		x = 0;
 8001ebc:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <main+0x9dc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	801a      	strh	r2, [r3, #0]
		y = 0;
 8001ec2:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <main+0x9e0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	801a      	strh	r2, [r3, #0]


		while (y < 240)
 8001ec8:	e026      	b.n	8001f18 <main+0x9b4>
		{
		while ((x < 320) && (y < 240))
		{

			if(y % 2)
 8001eca:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <main+0x9e0>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <main+0x984>
			{
				ILI9341_Draw_Pixel(x, y, BLACK);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <main+0x9dc>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	4a19      	ldr	r2, [pc, #100]	@ (8001f44 <main+0x9e0>)
 8001ede:	8811      	ldrh	r1, [r2, #0]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f892 	bl	800100c <ILI9341_Draw_Pixel>
			}

			x++;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <main+0x9dc>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <main+0x9dc>)
 8001ef2:	801a      	strh	r2, [r3, #0]
		while ((x < 320) && (y < 240))
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <main+0x9dc>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001efc:	d203      	bcs.n	8001f06 <main+0x9a2>
 8001efe:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <main+0x9e0>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	2bef      	cmp	r3, #239	@ 0xef
 8001f04:	d9e1      	bls.n	8001eca <main+0x966>
		}

			y++;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <main+0x9e0>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <main+0x9e0>)
 8001f10:	801a      	strh	r2, [r3, #0]
			x = 0;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <main+0x9dc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	801a      	strh	r2, [r3, #0]
		while (y < 240)
 8001f18:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <main+0x9e0>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	2bef      	cmp	r3, #239	@ 0xef
 8001f1e:	d9e9      	bls.n	8001ef4 <main+0x990>
		}
		HAL_Delay(2000);
 8001f20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f24:	f000 faa8 	bl	8002478 <HAL_Delay>
  {
 8001f28:	f7ff bb2f 	b.w	800158a <main+0x26>
 8001f2c:	080044ac 	.word	0x080044ac
 8001f30:	08004500 	.word	0x08004500
 8001f34:	0800450c 	.word	0x0800450c
 8001f38:	08004520 	.word	0x08004520
 8001f3c:	08004538 	.word	0x08004538
 8001f40:	200000c4 	.word	0x200000c4
 8001f44:	200000c6 	.word	0x200000c6

08001f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b090      	sub	sp, #64	@ 0x40
 8001f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4e:	f107 0318 	add.w	r3, r7, #24
 8001f52:	2228      	movs	r2, #40	@ 0x28
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 fda0 	bl	8003a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f72:	2310      	movs	r3, #16
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7a:	f107 0318 	add.w	r3, r7, #24
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fd1e 	bl	80029c0 <HAL_RCC_OscConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001f8a:	f000 f881 	bl	8002090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8e:	230f      	movs	r3, #15
 8001f90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 ff8c 	bl	8002ec4 <HAL_RCC_ClockConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001fb2:	f000 f86d 	bl	8002090 <Error_Handler>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3740      	adds	r7, #64	@ 0x40
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <MX_USART1_UART_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <MX_USART1_UART_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fca:	4b10      	ldr	r3, [pc, #64]	@ (800200c <MX_USART1_UART_Init+0x4c>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <MX_USART1_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <MX_USART1_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <MX_USART1_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	@ (800200c <MX_USART1_UART_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <MX_USART1_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_USART1_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	@ (800200c <MX_USART1_UART_Init+0x4c>)
 8001ff8:	f001 fb60 	bl	80036bc <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002002:	f000 f845 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000007c 	.word	0x2000007c
 8002010:	40013800 	.word	0x40013800

08002014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b17      	ldr	r3, [pc, #92]	@ (8002088 <MX_GPIO_Init+0x74>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a16      	ldr	r2, [pc, #88]	@ (8002088 <MX_GPIO_Init+0x74>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <MX_GPIO_Init+0x74>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <MX_GPIO_Init+0x74>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <MX_GPIO_Init+0x74>)
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <MX_GPIO_Init+0x74>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Diaplay_CS_Pin|Display_DC_Pin, GPIO_PIN_RESET);
 8002058:	2200      	movs	r2, #0
 800205a:	2103      	movs	r1, #3
 800205c:	480b      	ldr	r0, [pc, #44]	@ (800208c <MX_GPIO_Init+0x78>)
 800205e:	f000 fc97 	bl	8002990 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Diaplay_CS_Pin Display_DC_Pin */
  GPIO_InitStruct.Pin = Diaplay_CS_Pin|Display_DC_Pin;
 8002062:	2303      	movs	r3, #3
 8002064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2302      	movs	r3, #2
 8002070:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	4619      	mov	r1, r3
 8002078:	4804      	ldr	r0, [pc, #16]	@ (800208c <MX_GPIO_Init+0x78>)
 800207a:	f000 fb05 	bl	8002688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	40010c00 	.word	0x40010c00

08002090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002094:	b672      	cpsid	i
}
 8002096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <Error_Handler+0x8>

0800209c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI5 init function */
void MX_SPI1_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 80020a0:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020a2:	4a18      	ldr	r2, [pc, #96]	@ (8002104 <MX_SPI1_Init+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ae:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e0:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020e6:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ec:	4804      	ldr	r0, [pc, #16]	@ (8002100 <MX_SPI1_Init+0x64>)
 80020ee:	f001 f877 	bl	80031e0 <HAL_SPI_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020f8:	f7ff ffca 	bl	8002090 <Error_Handler>
  }

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200000c8 	.word	0x200000c8
 8002104:	40013000 	.word	0x40013000

08002108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <HAL_MspInit+0x5c>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <HAL_MspInit+0x5c>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6193      	str	r3, [r2, #24]
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_MspInit+0x5c>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <HAL_MspInit+0x5c>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a0e      	ldr	r2, [pc, #56]	@ (8002164 <HAL_MspInit+0x5c>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <HAL_MspInit+0x5c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_MspInit+0x60>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_MspInit+0x60>)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000

0800216c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <HAL_SPI_MspInit+0x88>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d12f      	bne.n	80021ec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_SPI_MspInit+0x8c>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a19      	ldr	r2, [pc, #100]	@ (80021f8 <HAL_SPI_MspInit+0x8c>)
 8002192:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <HAL_SPI_MspInit+0x8c>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <HAL_SPI_MspInit+0x8c>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a13      	ldr	r2, [pc, #76]	@ (80021f8 <HAL_SPI_MspInit+0x8c>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_SPI_MspInit+0x8c>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80021bc:	23b0      	movs	r3, #176	@ 0xb0
 80021be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	4619      	mov	r1, r3
 80021ce:	480b      	ldr	r0, [pc, #44]	@ (80021fc <HAL_SPI_MspInit+0x90>)
 80021d0:	f000 fa5a 	bl	8002688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021d4:	2340      	movs	r3, #64	@ 0x40
 80021d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	4619      	mov	r1, r3
 80021e6:	4805      	ldr	r0, [pc, #20]	@ (80021fc <HAL_SPI_MspInit+0x90>)
 80021e8:	f000 fa4e 	bl	8002688 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021ec:	bf00      	nop
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40013000 	.word	0x40013000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010800 	.word	0x40010800

08002200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1c      	ldr	r2, [pc, #112]	@ (800228c <HAL_UART_MspInit+0x8c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d131      	bne.n	8002284 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002220:	4b1b      	ldr	r3, [pc, #108]	@ (8002290 <HAL_UART_MspInit+0x90>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a1a      	ldr	r2, [pc, #104]	@ (8002290 <HAL_UART_MspInit+0x90>)
 8002226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b18      	ldr	r3, [pc, #96]	@ (8002290 <HAL_UART_MspInit+0x90>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_UART_MspInit+0x90>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <HAL_UART_MspInit+0x90>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_UART_MspInit+0x90>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4619      	mov	r1, r3
 8002264:	480b      	ldr	r0, [pc, #44]	@ (8002294 <HAL_UART_MspInit+0x94>)
 8002266:	f000 fa0f 	bl	8002688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800226a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800226e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 0310 	add.w	r3, r7, #16
 800227c:	4619      	mov	r1, r3
 800227e:	4805      	ldr	r0, [pc, #20]	@ (8002294 <HAL_UART_MspInit+0x94>)
 8002280:	f000 fa02 	bl	8002688 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002284:	bf00      	nop
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40013800 	.word	0x40013800
 8002290:	40021000 	.word	0x40021000
 8002294:	40010800 	.word	0x40010800

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <NMI_Handler+0x4>

080022a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <HardFault_Handler+0x4>

080022a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <MemManage_Handler+0x4>

080022b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <UsageFault_Handler+0x4>

080022c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e8:	f000 f8aa 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f8:	4a14      	ldr	r2, [pc, #80]	@ (800234c <_sbrk+0x5c>)
 80022fa:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <_sbrk+0x60>)
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002304:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <_sbrk+0x64>)
 800230e:	4a12      	ldr	r2, [pc, #72]	@ (8002358 <_sbrk+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d207      	bcs.n	8002330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002320:	f001 fbc4 	bl	8003aac <__errno>
 8002324:	4603      	mov	r3, r0
 8002326:	220c      	movs	r2, #12
 8002328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	e009      	b.n	8002344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002330:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002336:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <_sbrk+0x64>)
 8002340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20005000 	.word	0x20005000
 8002350:	00000400 	.word	0x00000400
 8002354:	20000120 	.word	0x20000120
 8002358:	20000270 	.word	0x20000270

0800235c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002368:	f7ff fff8 	bl	800235c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480b      	ldr	r0, [pc, #44]	@ (800239c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800236e:	490c      	ldr	r1, [pc, #48]	@ (80023a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002370:	4a0c      	ldr	r2, [pc, #48]	@ (80023a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002384:	4c09      	ldr	r4, [pc, #36]	@ (80023ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002392:	f001 fb91 	bl	8003ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002396:	f7ff f8e5 	bl	8001564 <main>
  bx lr
 800239a:	4770      	bx	lr
  ldr r0, =_sdata
 800239c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80023a4:	08004808 	.word	0x08004808
  ldr r2, =_sbss
 80023a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80023ac:	20000270 	.word	0x20000270

080023b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023b0:	e7fe      	b.n	80023b0 <ADC1_2_IRQHandler>
	...

080023b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <HAL_Init+0x28>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <HAL_Init+0x28>)
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f000 f92b 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ca:	200f      	movs	r0, #15
 80023cc:	f000 f808 	bl	80023e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d0:	f7ff fe9a 	bl	8002108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40022000 	.word	0x40022000

080023e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_InitTick+0x54>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_InitTick+0x58>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f935 	bl	800266e <HAL_SYSTICK_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00e      	b.n	800242c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d80a      	bhi.n	800242a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002414:	2200      	movs	r2, #0
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f000 f90b 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002420:	4a06      	ldr	r2, [pc, #24]	@ (800243c <HAL_InitTick+0x5c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000004 	.word	0x20000004
 8002438:	2000000c 	.word	0x2000000c
 800243c:	20000008 	.word	0x20000008

08002440 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_IncTick+0x1c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_IncTick+0x20>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a03      	ldr	r2, [pc, #12]	@ (8002460 <HAL_IncTick+0x20>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	2000000c 	.word	0x2000000c
 8002460:	20000124 	.word	0x20000124

08002464 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return uwTick;
 8002468:	4b02      	ldr	r3, [pc, #8]	@ (8002474 <HAL_GetTick+0x10>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	20000124 	.word	0x20000124

08002478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff fff0 	bl	8002464 <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d005      	beq.n	800249e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_Delay+0x44>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800249e:	bf00      	nop
 80024a0:	f7ff ffe0 	bl	8002464 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d8f7      	bhi.n	80024a0 <HAL_Delay+0x28>
  {
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000000c 	.word	0x2000000c

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	@ (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	@ (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	@ 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	@ (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff90 	bl	8002524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	@ (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff49 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff5e 	bl	8002508 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff90 	bl	8002578 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5f 	bl	8002524 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ffb0 	bl	80025dc <SysTick_Config>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b08b      	sub	sp, #44	@ 0x2c
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269a:	e169      	b.n	8002970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800269c:	2201      	movs	r2, #1
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f040 8158 	bne.w	800296a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a9a      	ldr	r2, [pc, #616]	@ (8002928 <HAL_GPIO_Init+0x2a0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d05e      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026c4:	4a98      	ldr	r2, [pc, #608]	@ (8002928 <HAL_GPIO_Init+0x2a0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d875      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026ca:	4a98      	ldr	r2, [pc, #608]	@ (800292c <HAL_GPIO_Init+0x2a4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d058      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026d0:	4a96      	ldr	r2, [pc, #600]	@ (800292c <HAL_GPIO_Init+0x2a4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d86f      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026d6:	4a96      	ldr	r2, [pc, #600]	@ (8002930 <HAL_GPIO_Init+0x2a8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d052      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026dc:	4a94      	ldr	r2, [pc, #592]	@ (8002930 <HAL_GPIO_Init+0x2a8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d869      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026e2:	4a94      	ldr	r2, [pc, #592]	@ (8002934 <HAL_GPIO_Init+0x2ac>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d04c      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026e8:	4a92      	ldr	r2, [pc, #584]	@ (8002934 <HAL_GPIO_Init+0x2ac>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d863      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026ee:	4a92      	ldr	r2, [pc, #584]	@ (8002938 <HAL_GPIO_Init+0x2b0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d046      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026f4:	4a90      	ldr	r2, [pc, #576]	@ (8002938 <HAL_GPIO_Init+0x2b0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d85d      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026fa:	2b12      	cmp	r3, #18
 80026fc:	d82a      	bhi.n	8002754 <HAL_GPIO_Init+0xcc>
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d859      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 8002702:	a201      	add	r2, pc, #4	@ (adr r2, 8002708 <HAL_GPIO_Init+0x80>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002783 	.word	0x08002783
 800270c:	0800275d 	.word	0x0800275d
 8002710:	0800276f 	.word	0x0800276f
 8002714:	080027b1 	.word	0x080027b1
 8002718:	080027b7 	.word	0x080027b7
 800271c:	080027b7 	.word	0x080027b7
 8002720:	080027b7 	.word	0x080027b7
 8002724:	080027b7 	.word	0x080027b7
 8002728:	080027b7 	.word	0x080027b7
 800272c:	080027b7 	.word	0x080027b7
 8002730:	080027b7 	.word	0x080027b7
 8002734:	080027b7 	.word	0x080027b7
 8002738:	080027b7 	.word	0x080027b7
 800273c:	080027b7 	.word	0x080027b7
 8002740:	080027b7 	.word	0x080027b7
 8002744:	080027b7 	.word	0x080027b7
 8002748:	080027b7 	.word	0x080027b7
 800274c:	08002765 	.word	0x08002765
 8002750:	08002779 	.word	0x08002779
 8002754:	4a79      	ldr	r2, [pc, #484]	@ (800293c <HAL_GPIO_Init+0x2b4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800275a:	e02c      	b.n	80027b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	623b      	str	r3, [r7, #32]
          break;
 8002762:	e029      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	3304      	adds	r3, #4
 800276a:	623b      	str	r3, [r7, #32]
          break;
 800276c:	e024      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	3308      	adds	r3, #8
 8002774:	623b      	str	r3, [r7, #32]
          break;
 8002776:	e01f      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	330c      	adds	r3, #12
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e01a      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800278a:	2304      	movs	r3, #4
 800278c:	623b      	str	r3, [r7, #32]
          break;
 800278e:	e013      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002798:	2308      	movs	r3, #8
 800279a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	611a      	str	r2, [r3, #16]
          break;
 80027a2:	e009      	b.n	80027b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a4:	2308      	movs	r3, #8
 80027a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	615a      	str	r2, [r3, #20]
          break;
 80027ae:	e003      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
          break;
 80027b4:	e000      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          break;
 80027b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2bff      	cmp	r3, #255	@ 0xff
 80027bc:	d801      	bhi.n	80027c2 <HAL_GPIO_Init+0x13a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	e001      	b.n	80027c6 <HAL_GPIO_Init+0x13e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2bff      	cmp	r3, #255	@ 0xff
 80027cc:	d802      	bhi.n	80027d4 <HAL_GPIO_Init+0x14c>
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	e002      	b.n	80027da <HAL_GPIO_Init+0x152>
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	3b08      	subs	r3, #8
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	210f      	movs	r1, #15
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	401a      	ands	r2, r3
 80027ec:	6a39      	ldr	r1, [r7, #32]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	431a      	orrs	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80b1 	beq.w	800296a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002808:	4b4d      	ldr	r3, [pc, #308]	@ (8002940 <HAL_GPIO_Init+0x2b8>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a4c      	ldr	r2, [pc, #304]	@ (8002940 <HAL_GPIO_Init+0x2b8>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b4a      	ldr	r3, [pc, #296]	@ (8002940 <HAL_GPIO_Init+0x2b8>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002820:	4a48      	ldr	r2, [pc, #288]	@ (8002944 <HAL_GPIO_Init+0x2bc>)
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a40      	ldr	r2, [pc, #256]	@ (8002948 <HAL_GPIO_Init+0x2c0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_GPIO_Init+0x1ec>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3f      	ldr	r2, [pc, #252]	@ (800294c <HAL_GPIO_Init+0x2c4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00d      	beq.n	8002870 <HAL_GPIO_Init+0x1e8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3e      	ldr	r2, [pc, #248]	@ (8002950 <HAL_GPIO_Init+0x2c8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <HAL_GPIO_Init+0x1e4>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3d      	ldr	r2, [pc, #244]	@ (8002954 <HAL_GPIO_Init+0x2cc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_GPIO_Init+0x1e0>
 8002864:	2303      	movs	r3, #3
 8002866:	e006      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002868:	2304      	movs	r3, #4
 800286a:	e004      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 800286c:	2302      	movs	r3, #2
 800286e:	e002      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002874:	2300      	movs	r3, #0
 8002876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002878:	f002 0203 	and.w	r2, r2, #3
 800287c:	0092      	lsls	r2, r2, #2
 800287e:	4093      	lsls	r3, r2
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002886:	492f      	ldr	r1, [pc, #188]	@ (8002944 <HAL_GPIO_Init+0x2bc>)
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	492c      	ldr	r1, [pc, #176]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4928      	ldr	r1, [pc, #160]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028c8:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	4922      	ldr	r1, [pc, #136]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
 80028d4:	e006      	b.n	80028e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	43db      	mvns	r3, r3
 80028de:	491e      	ldr	r1, [pc, #120]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4918      	ldr	r1, [pc, #96]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028fe:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	43db      	mvns	r3, r3
 8002906:	4914      	ldr	r1, [pc, #80]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 8002908:	4013      	ands	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d021      	beq.n	800295c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002918:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	490e      	ldr	r1, [pc, #56]	@ (8002958 <HAL_GPIO_Init+0x2d0>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e021      	b.n	800296a <HAL_GPIO_Init+0x2e2>
 8002926:	bf00      	nop
 8002928:	10320000 	.word	0x10320000
 800292c:	10310000 	.word	0x10310000
 8002930:	10220000 	.word	0x10220000
 8002934:	10210000 	.word	0x10210000
 8002938:	10120000 	.word	0x10120000
 800293c:	10110000 	.word	0x10110000
 8002940:	40021000 	.word	0x40021000
 8002944:	40010000 	.word	0x40010000
 8002948:	40010800 	.word	0x40010800
 800294c:	40010c00 	.word	0x40010c00
 8002950:	40011000 	.word	0x40011000
 8002954:	40011400 	.word	0x40011400
 8002958:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_GPIO_Init+0x304>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	43db      	mvns	r3, r3
 8002964:	4909      	ldr	r1, [pc, #36]	@ (800298c <HAL_GPIO_Init+0x304>)
 8002966:	4013      	ands	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	3301      	adds	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	f47f ae8e 	bne.w	800269c <HAL_GPIO_Init+0x14>
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	372c      	adds	r7, #44	@ 0x2c
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
 800299c:	4613      	mov	r3, r2
 800299e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a0:	787b      	ldrb	r3, [r7, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a6:	887a      	ldrh	r2, [r7, #2]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ac:	e003      	b.n	80029b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	041a      	lsls	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e272      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8087 	beq.w	8002aee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e0:	4b92      	ldr	r3, [pc, #584]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d00c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ec:	4b8f      	ldr	r3, [pc, #572]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d112      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5e>
 80029f8:	4b8c      	ldr	r3, [pc, #560]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a04:	d10b      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a06:	4b89      	ldr	r3, [pc, #548]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d06c      	beq.n	8002aec <HAL_RCC_OscConfig+0x12c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d168      	bne.n	8002aec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e24c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x76>
 8002a28:	4b80      	ldr	r3, [pc, #512]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e02e      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x98>
 8002a3e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7a      	ldr	r2, [pc, #488]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b78      	ldr	r3, [pc, #480]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a77      	ldr	r2, [pc, #476]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e01d      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0xbc>
 8002a62:	4b72      	ldr	r3, [pc, #456]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a71      	ldr	r2, [pc, #452]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6e      	ldr	r2, [pc, #440]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a7c:	4b6b      	ldr	r3, [pc, #428]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6a      	ldr	r2, [pc, #424]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b68      	ldr	r3, [pc, #416]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a67      	ldr	r2, [pc, #412]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fce2 	bl	8002464 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7ff fcde 	bl	8002464 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e200      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xe4>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7ff fcce 	bl	8002464 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7ff fcca 	bl	8002464 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1ec      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	4b53      	ldr	r3, [pc, #332]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x10c>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d063      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afa:	4b4c      	ldr	r3, [pc, #304]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d11c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x18c>
 8002b12:	4b46      	ldr	r3, [pc, #280]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	4b43      	ldr	r3, [pc, #268]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_RCC_OscConfig+0x176>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e1c0      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b3d      	ldr	r3, [pc, #244]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4939      	ldr	r1, [pc, #228]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	e03a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b54:	4b36      	ldr	r3, [pc, #216]	@ (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7ff fc83 	bl	8002464 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7ff fc7f 	bl	8002464 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e1a1      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	4b2d      	ldr	r3, [pc, #180]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4b2a      	ldr	r3, [pc, #168]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4927      	ldr	r1, [pc, #156]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b96:	4b26      	ldr	r3, [pc, #152]	@ (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff fc62 	bl	8002464 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7ff fc5e 	bl	8002464 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e180      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d03a      	beq.n	8002c44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d019      	beq.n	8002c0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd6:	4b17      	ldr	r3, [pc, #92]	@ (8002c34 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bdc:	f7ff fc42 	bl	8002464 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be4:	f7ff fc3e 	bl	8002464 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e160      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f000 face 	bl	80031a4 <RCC_Delay>
 8002c08:	e01c      	b.n	8002c44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c10:	f7ff fc28 	bl	8002464 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c16:	e00f      	b.n	8002c38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c18:	f7ff fc24 	bl	8002464 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d908      	bls.n	8002c38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e146      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	42420000 	.word	0x42420000
 8002c34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	4b92      	ldr	r3, [pc, #584]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e9      	bne.n	8002c18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80a6 	beq.w	8002d9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c56:	4b8b      	ldr	r3, [pc, #556]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b88      	ldr	r3, [pc, #544]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4a87      	ldr	r2, [pc, #540]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	61d3      	str	r3, [r2, #28]
 8002c6e:	4b85      	ldr	r3, [pc, #532]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b82      	ldr	r3, [pc, #520]	@ (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7ff fbe5 	bl	8002464 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7ff fbe1 	bl	8002464 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	@ 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e103      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b75      	ldr	r3, [pc, #468]	@ (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x312>
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	e02d      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x334>
 8002cda:	4b6a      	ldr	r3, [pc, #424]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a69      	ldr	r2, [pc, #420]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	4b67      	ldr	r3, [pc, #412]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a66      	ldr	r2, [pc, #408]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	e01c      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x356>
 8002cfc:	4b61      	ldr	r3, [pc, #388]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a60      	ldr	r2, [pc, #384]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	4b5e      	ldr	r3, [pc, #376]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	e00b      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002d16:	4b5b      	ldr	r3, [pc, #364]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a5a      	ldr	r2, [pc, #360]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6213      	str	r3, [r2, #32]
 8002d22:	4b58      	ldr	r3, [pc, #352]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a57      	ldr	r2, [pc, #348]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d015      	beq.n	8002d62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7ff fb95 	bl	8002464 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7ff fb91 	bl	8002464 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0b1      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	4b4b      	ldr	r3, [pc, #300]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCC_OscConfig+0x37e>
 8002d60:	e014      	b.n	8002d8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7ff fb7f 	bl	8002464 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7ff fb7b 	bl	8002464 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e09b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	4b40      	ldr	r3, [pc, #256]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b3c      	ldr	r3, [pc, #240]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4a3b      	ldr	r2, [pc, #236]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8087 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da8:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d061      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d146      	bne.n	8002e4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b33      	ldr	r3, [pc, #204]	@ (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7ff fb4f 	bl	8002464 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7ff fb4b 	bl	8002464 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e06d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ddc:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df0:	d108      	bne.n	8002e04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002df2:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4921      	ldr	r1, [pc, #132]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e04:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a19      	ldr	r1, [r3, #32]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	430b      	orrs	r3, r1
 8002e16:	491b      	ldr	r1, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7ff fb1f 	bl	8002464 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7ff fb1b 	bl	8002464 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e03d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x46a>
 8002e48:	e035      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7ff fb08 	bl	8002464 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7ff fb04 	bl	8002464 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e026      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x498>
 8002e76:	e01e      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e019      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_OscConfig+0x500>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0d0      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d910      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b67      	ldr	r3, [pc, #412]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0207 	bic.w	r2, r3, #7
 8002eee:	4965      	ldr	r1, [pc, #404]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b63      	ldr	r3, [pc, #396]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0b8      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f20:	4b59      	ldr	r3, [pc, #356]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a58      	ldr	r2, [pc, #352]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f38:	4b53      	ldr	r3, [pc, #332]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f44:	4b50      	ldr	r3, [pc, #320]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	494d      	ldr	r1, [pc, #308]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d040      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b47      	ldr	r3, [pc, #284]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d115      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e07f      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b41      	ldr	r3, [pc, #260]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e073      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f92:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06b      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa2:	4b39      	ldr	r3, [pc, #228]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f023 0203 	bic.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4936      	ldr	r1, [pc, #216]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb4:	f7ff fa56 	bl	8002464 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7ff fa52 	bl	8002464 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e053      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 020c 	and.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1eb      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b27      	ldr	r3, [pc, #156]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d210      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4922      	ldr	r1, [pc, #136]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b20      	ldr	r3, [pc, #128]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e032      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003020:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4916      	ldr	r1, [pc, #88]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800303e:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	490e      	ldr	r1, [pc, #56]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003052:	f000 f821 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003056:	4602      	mov	r2, r0
 8003058:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	490a      	ldr	r1, [pc, #40]	@ (800308c <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	5ccb      	ldrb	r3, [r1, r3]
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	4a09      	ldr	r2, [pc, #36]	@ (8003090 <HAL_RCC_ClockConfig+0x1cc>)
 800306c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800306e:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <HAL_RCC_ClockConfig+0x1d0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f9b4 	bl	80023e0 <HAL_InitTick>

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40022000 	.word	0x40022000
 8003088:	40021000 	.word	0x40021000
 800308c:	080047a0 	.word	0x080047a0
 8003090:	20000004 	.word	0x20000004
 8003094:	20000008 	.word	0x20000008

08003098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030b2:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <HAL_RCC_GetSysClockFreq+0x94>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d002      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x30>
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x36>
 80030c6:	e027      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c8:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ca:	613b      	str	r3, [r7, #16]
      break;
 80030cc:	e027      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	0c9b      	lsrs	r3, r3, #18
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030d8:	5cd3      	ldrb	r3, [r2, r3]
 80030da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d010      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030e6:	4b11      	ldr	r3, [pc, #68]	@ (800312c <HAL_RCC_GetSysClockFreq+0x94>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0c5b      	lsrs	r3, r3, #17
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	4a11      	ldr	r2, [pc, #68]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fa:	fb03 f202 	mul.w	r2, r3, r2
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e004      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0c      	ldr	r2, [pc, #48]	@ (800313c <HAL_RCC_GetSysClockFreq+0xa4>)
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	613b      	str	r3, [r7, #16]
      break;
 8003116:	e002      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x98>)
 800311a:	613b      	str	r3, [r7, #16]
      break;
 800311c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311e:	693b      	ldr	r3, [r7, #16]
}
 8003120:	4618      	mov	r0, r3
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	007a1200 	.word	0x007a1200
 8003134:	080047b8 	.word	0x080047b8
 8003138:	080047c8 	.word	0x080047c8
 800313c:	003d0900 	.word	0x003d0900

08003140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003144:	4b02      	ldr	r3, [pc, #8]	@ (8003150 <HAL_RCC_GetHCLKFreq+0x10>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff2 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	@ (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	080047b0 	.word	0x080047b0

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffde 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	0adb      	lsrs	r3, r3, #11
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	080047b0 	.word	0x080047b0

080031a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <RCC_Delay+0x34>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <RCC_Delay+0x38>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0a5b      	lsrs	r3, r3, #9
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031c0:	bf00      	nop
  }
  while (Delay --);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1e5a      	subs	r2, r3, #1
 80031c6:	60fa      	str	r2, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f9      	bne.n	80031c0 <RCC_Delay+0x1c>
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	20000004 	.word	0x20000004
 80031dc:	10624dd3 	.word	0x10624dd3

080031e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e076      	b.n	80032e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d108      	bne.n	800320c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003202:	d009      	beq.n	8003218 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
 800320a:	e005      	b.n	8003218 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe ff9a 	bl	800216c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800324e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329c:	ea42 0103 	orr.w	r1, r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	0c1a      	lsrs	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f002 0204 	and.w	r2, r2, #4
 80032be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_SPI_Transmit+0x22>
 8003306:	2302      	movs	r3, #2
 8003308:	e12d      	b.n	8003566 <HAL_SPI_Transmit+0x27e>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003312:	f7ff f8a7 	bl	8002464 <HAL_GetTick>
 8003316:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d002      	beq.n	800332e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003328:	2302      	movs	r3, #2
 800332a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800332c:	e116      	b.n	800355c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_SPI_Transmit+0x52>
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800333e:	e10d      	b.n	800355c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2203      	movs	r2, #3
 8003344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003386:	d10f      	bne.n	80033a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003396:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b2:	2b40      	cmp	r3, #64	@ 0x40
 80033b4:	d007      	beq.n	80033c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ce:	d14f      	bne.n	8003470 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_Transmit+0xf6>
 80033d8:	8afb      	ldrh	r3, [r7, #22]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d142      	bne.n	8003464 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003402:	e02f      	b.n	8003464 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d112      	bne.n	8003438 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	1c9a      	adds	r2, r3, #2
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003436:	e015      	b.n	8003464 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003438:	f7ff f814 	bl	8002464 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d803      	bhi.n	8003450 <HAL_SPI_Transmit+0x168>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d102      	bne.n	8003456 <HAL_SPI_Transmit+0x16e>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003462:	e07b      	b.n	800355c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ca      	bne.n	8003404 <HAL_SPI_Transmit+0x11c>
 800346e:	e050      	b.n	8003512 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_SPI_Transmit+0x196>
 8003478:	8afb      	ldrh	r3, [r7, #22]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d144      	bne.n	8003508 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034a4:	e030      	b.n	8003508 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d113      	bne.n	80034dc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034da:	e015      	b.n	8003508 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034dc:	f7fe ffc2 	bl	8002464 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d803      	bhi.n	80034f4 <HAL_SPI_Transmit+0x20c>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d102      	bne.n	80034fa <HAL_SPI_Transmit+0x212>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003506:	e029      	b.n	800355c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1c9      	bne.n	80034a6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f8b2 	bl	8003680 <SPI_EndRxTxTransaction>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e003      	b.n	800355c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003564:	7ffb      	ldrb	r3, [r7, #31]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003580:	f7fe ff70 	bl	8002464 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	4413      	add	r3, r2
 800358e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003590:	f7fe ff68 	bl	8002464 <HAL_GetTick>
 8003594:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003596:	4b39      	ldr	r3, [pc, #228]	@ (800367c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	015b      	lsls	r3, r3, #5
 800359c:	0d1b      	lsrs	r3, r3, #20
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035a6:	e054      	b.n	8003652 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d050      	beq.n	8003652 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035b0:	f7fe ff58 	bl	8002464 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d902      	bls.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d13d      	bne.n	8003642 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035de:	d111      	bne.n	8003604 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035e8:	d004      	beq.n	80035f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f2:	d107      	bne.n	8003604 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003602:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800360c:	d10f      	bne.n	800362e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800362c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e017      	b.n	8003672 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	3b01      	subs	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4013      	ands	r3, r2
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	bf0c      	ite	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	2300      	movne	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	429a      	cmp	r2, r3
 800366e:	d19b      	bne.n	80035a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000004 	.word	0x20000004

08003680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	2180      	movs	r1, #128	@ 0x80
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff ff6a 	bl	8003570 <SPI_WaitFlagStateUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a6:	f043 0220 	orr.w	r2, r3, #32
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e000      	b.n	80036b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e042      	b.n	8003754 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fe fd8c 	bl	8002200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2224      	movs	r2, #36	@ 0x24
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f91d 	bl	8003940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	@ 0x28
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b20      	cmp	r3, #32
 800377a:	d16d      	bne.n	8003858 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_UART_Transmit+0x2c>
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e066      	b.n	800385a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2221      	movs	r2, #33	@ 0x21
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379a:	f7fe fe63 	bl	8002464 <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	88fa      	ldrh	r2, [r7, #6]
 80037aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b4:	d108      	bne.n	80037c8 <HAL_UART_Transmit+0x6c>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e003      	b.n	80037d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037d0:	e02a      	b.n	8003828 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	2180      	movs	r1, #128	@ 0x80
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f840 	bl	8003862 <UART_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e036      	b.n	800385a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10b      	bne.n	800380a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003800:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	3302      	adds	r3, #2
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	e007      	b.n	800381a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3301      	adds	r3, #1
 8003818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1cf      	bne.n	80037d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	2140      	movs	r1, #64	@ 0x40
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f810 	bl	8003862 <UART_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e006      	b.n	800385a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b090      	sub	sp, #64	@ 0x40
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4613      	mov	r3, r2
 8003870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003872:	e050      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	d04c      	beq.n	8003916 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800387c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <UART_WaitOnFlagUntilTimeout+0x30>
 8003882:	f7fe fdef 	bl	8002464 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800388e:	429a      	cmp	r2, r3
 8003890:	d241      	bcs.n	8003916 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80038a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80038b4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80038c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e5      	bne.n	8003892 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3314      	adds	r3, #20
 80038cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	613b      	str	r3, [r7, #16]
   return(result);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80038e6:	623a      	str	r2, [r7, #32]
 80038e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	69f9      	ldr	r1, [r7, #28]
 80038ec:	6a3a      	ldr	r2, [r7, #32]
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e5      	bne.n	80038c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e00f      	b.n	8003936 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4013      	ands	r3, r2
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	429a      	cmp	r2, r3
 8003932:	d09f      	beq.n	8003874 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3740      	adds	r7, #64	@ 0x40
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800397a:	f023 030c 	bic.w	r3, r3, #12
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	430b      	orrs	r3, r1
 8003986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a54 <UART_SetConfig+0x114>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d103      	bne.n	80039b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7ff fbe8 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	e002      	b.n	80039b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039b0:	f7ff fbd0 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 80039b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	4a22      	ldr	r2, [pc, #136]	@ (8003a58 <UART_SetConfig+0x118>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	0119      	lsls	r1, r3, #4
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009a      	lsls	r2, r3, #2
 80039e0:	441a      	add	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003a58 <UART_SetConfig+0x118>)
 80039ee:	fba3 0302 	umull	r0, r3, r3, r2
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2064      	movs	r0, #100	@ 0x64
 80039f6:	fb00 f303 	mul.w	r3, r0, r3
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	3332      	adds	r3, #50	@ 0x32
 8003a00:	4a15      	ldr	r2, [pc, #84]	@ (8003a58 <UART_SetConfig+0x118>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a0c:	4419      	add	r1, r3
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	009a      	lsls	r2, r3, #2
 8003a18:	441a      	add	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <UART_SetConfig+0x118>)
 8003a26:	fba3 0302 	umull	r0, r3, r3, r2
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2064      	movs	r0, #100	@ 0x64
 8003a2e:	fb00 f303 	mul.w	r3, r0, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	3332      	adds	r3, #50	@ 0x32
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <UART_SetConfig+0x118>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	f003 020f 	and.w	r2, r3, #15
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	440a      	add	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40013800 	.word	0x40013800
 8003a58:	51eb851f 	.word	0x51eb851f

08003a5c <siprintf>:
 8003a5c:	b40e      	push	{r1, r2, r3}
 8003a5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a62:	b500      	push	{lr}
 8003a64:	b09c      	sub	sp, #112	@ 0x70
 8003a66:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a68:	9002      	str	r0, [sp, #8]
 8003a6a:	9006      	str	r0, [sp, #24]
 8003a6c:	9107      	str	r1, [sp, #28]
 8003a6e:	9104      	str	r1, [sp, #16]
 8003a70:	4808      	ldr	r0, [pc, #32]	@ (8003a94 <siprintf+0x38>)
 8003a72:	4909      	ldr	r1, [pc, #36]	@ (8003a98 <siprintf+0x3c>)
 8003a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a78:	9105      	str	r1, [sp, #20]
 8003a7a:	6800      	ldr	r0, [r0, #0]
 8003a7c:	a902      	add	r1, sp, #8
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	f000 f992 	bl	8003da8 <_svfiprintf_r>
 8003a84:	2200      	movs	r2, #0
 8003a86:	9b02      	ldr	r3, [sp, #8]
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	b01c      	add	sp, #112	@ 0x70
 8003a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a90:	b003      	add	sp, #12
 8003a92:	4770      	bx	lr
 8003a94:	20000010 	.word	0x20000010
 8003a98:	ffff0208 	.word	0xffff0208

08003a9c <memset>:
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4402      	add	r2, r0
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <memset+0xa>
 8003aa4:	4770      	bx	lr
 8003aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aaa:	e7f9      	b.n	8003aa0 <memset+0x4>

08003aac <__errno>:
 8003aac:	4b01      	ldr	r3, [pc, #4]	@ (8003ab4 <__errno+0x8>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000010 	.word	0x20000010

08003ab8 <__libc_init_array>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	2600      	movs	r6, #0
 8003abc:	4d0c      	ldr	r5, [pc, #48]	@ (8003af0 <__libc_init_array+0x38>)
 8003abe:	4c0d      	ldr	r4, [pc, #52]	@ (8003af4 <__libc_init_array+0x3c>)
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	d109      	bne.n	8003adc <__libc_init_array+0x24>
 8003ac8:	f000 fc78 	bl	80043bc <_init>
 8003acc:	2600      	movs	r6, #0
 8003ace:	4d0a      	ldr	r5, [pc, #40]	@ (8003af8 <__libc_init_array+0x40>)
 8003ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8003afc <__libc_init_array+0x44>)
 8003ad2:	1b64      	subs	r4, r4, r5
 8003ad4:	10a4      	asrs	r4, r4, #2
 8003ad6:	42a6      	cmp	r6, r4
 8003ad8:	d105      	bne.n	8003ae6 <__libc_init_array+0x2e>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae0:	4798      	blx	r3
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7ee      	b.n	8003ac4 <__libc_init_array+0xc>
 8003ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aea:	4798      	blx	r3
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7f2      	b.n	8003ad6 <__libc_init_array+0x1e>
 8003af0:	08004800 	.word	0x08004800
 8003af4:	08004800 	.word	0x08004800
 8003af8:	08004800 	.word	0x08004800
 8003afc:	08004804 	.word	0x08004804

08003b00 <__retarget_lock_acquire_recursive>:
 8003b00:	4770      	bx	lr

08003b02 <__retarget_lock_release_recursive>:
 8003b02:	4770      	bx	lr

08003b04 <_free_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4605      	mov	r5, r0
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	d040      	beq.n	8003b8e <_free_r+0x8a>
 8003b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b10:	1f0c      	subs	r4, r1, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bfb8      	it	lt
 8003b16:	18e4      	addlt	r4, r4, r3
 8003b18:	f000 f8de 	bl	8003cd8 <__malloc_lock>
 8003b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b90 <_free_r+0x8c>)
 8003b1e:	6813      	ldr	r3, [r2, #0]
 8003b20:	b933      	cbnz	r3, 8003b30 <_free_r+0x2c>
 8003b22:	6063      	str	r3, [r4, #4]
 8003b24:	6014      	str	r4, [r2, #0]
 8003b26:	4628      	mov	r0, r5
 8003b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b2c:	f000 b8da 	b.w	8003ce4 <__malloc_unlock>
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	d908      	bls.n	8003b46 <_free_r+0x42>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	1821      	adds	r1, r4, r0
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	bf01      	itttt	eq
 8003b3c:	6819      	ldreq	r1, [r3, #0]
 8003b3e:	685b      	ldreq	r3, [r3, #4]
 8003b40:	1809      	addeq	r1, r1, r0
 8003b42:	6021      	streq	r1, [r4, #0]
 8003b44:	e7ed      	b.n	8003b22 <_free_r+0x1e>
 8003b46:	461a      	mov	r2, r3
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	b10b      	cbz	r3, 8003b50 <_free_r+0x4c>
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	d9fa      	bls.n	8003b46 <_free_r+0x42>
 8003b50:	6811      	ldr	r1, [r2, #0]
 8003b52:	1850      	adds	r0, r2, r1
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d10b      	bne.n	8003b70 <_free_r+0x6c>
 8003b58:	6820      	ldr	r0, [r4, #0]
 8003b5a:	4401      	add	r1, r0
 8003b5c:	1850      	adds	r0, r2, r1
 8003b5e:	4283      	cmp	r3, r0
 8003b60:	6011      	str	r1, [r2, #0]
 8003b62:	d1e0      	bne.n	8003b26 <_free_r+0x22>
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4408      	add	r0, r1
 8003b6a:	6010      	str	r0, [r2, #0]
 8003b6c:	6053      	str	r3, [r2, #4]
 8003b6e:	e7da      	b.n	8003b26 <_free_r+0x22>
 8003b70:	d902      	bls.n	8003b78 <_free_r+0x74>
 8003b72:	230c      	movs	r3, #12
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	e7d6      	b.n	8003b26 <_free_r+0x22>
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	1821      	adds	r1, r4, r0
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	bf01      	itttt	eq
 8003b80:	6819      	ldreq	r1, [r3, #0]
 8003b82:	685b      	ldreq	r3, [r3, #4]
 8003b84:	1809      	addeq	r1, r1, r0
 8003b86:	6021      	streq	r1, [r4, #0]
 8003b88:	6063      	str	r3, [r4, #4]
 8003b8a:	6054      	str	r4, [r2, #4]
 8003b8c:	e7cb      	b.n	8003b26 <_free_r+0x22>
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	2000026c 	.word	0x2000026c

08003b94 <sbrk_aligned>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	4e0f      	ldr	r6, [pc, #60]	@ (8003bd4 <sbrk_aligned+0x40>)
 8003b98:	460c      	mov	r4, r1
 8003b9a:	6831      	ldr	r1, [r6, #0]
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	b911      	cbnz	r1, 8003ba6 <sbrk_aligned+0x12>
 8003ba0:	f000 fbaa 	bl	80042f8 <_sbrk_r>
 8003ba4:	6030      	str	r0, [r6, #0]
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f000 fba5 	bl	80042f8 <_sbrk_r>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d103      	bne.n	8003bba <sbrk_aligned+0x26>
 8003bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
 8003bba:	1cc4      	adds	r4, r0, #3
 8003bbc:	f024 0403 	bic.w	r4, r4, #3
 8003bc0:	42a0      	cmp	r0, r4
 8003bc2:	d0f8      	beq.n	8003bb6 <sbrk_aligned+0x22>
 8003bc4:	1a21      	subs	r1, r4, r0
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 fb96 	bl	80042f8 <_sbrk_r>
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d1f2      	bne.n	8003bb6 <sbrk_aligned+0x22>
 8003bd0:	e7ef      	b.n	8003bb2 <sbrk_aligned+0x1e>
 8003bd2:	bf00      	nop
 8003bd4:	20000268 	.word	0x20000268

08003bd8 <_malloc_r>:
 8003bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bdc:	1ccd      	adds	r5, r1, #3
 8003bde:	f025 0503 	bic.w	r5, r5, #3
 8003be2:	3508      	adds	r5, #8
 8003be4:	2d0c      	cmp	r5, #12
 8003be6:	bf38      	it	cc
 8003be8:	250c      	movcc	r5, #12
 8003bea:	2d00      	cmp	r5, #0
 8003bec:	4606      	mov	r6, r0
 8003bee:	db01      	blt.n	8003bf4 <_malloc_r+0x1c>
 8003bf0:	42a9      	cmp	r1, r5
 8003bf2:	d904      	bls.n	8003bfe <_malloc_r+0x26>
 8003bf4:	230c      	movs	r3, #12
 8003bf6:	6033      	str	r3, [r6, #0]
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cd4 <_malloc_r+0xfc>
 8003c02:	f000 f869 	bl	8003cd8 <__malloc_lock>
 8003c06:	f8d8 3000 	ldr.w	r3, [r8]
 8003c0a:	461c      	mov	r4, r3
 8003c0c:	bb44      	cbnz	r4, 8003c60 <_malloc_r+0x88>
 8003c0e:	4629      	mov	r1, r5
 8003c10:	4630      	mov	r0, r6
 8003c12:	f7ff ffbf 	bl	8003b94 <sbrk_aligned>
 8003c16:	1c43      	adds	r3, r0, #1
 8003c18:	4604      	mov	r4, r0
 8003c1a:	d158      	bne.n	8003cce <_malloc_r+0xf6>
 8003c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8003c20:	4627      	mov	r7, r4
 8003c22:	2f00      	cmp	r7, #0
 8003c24:	d143      	bne.n	8003cae <_malloc_r+0xd6>
 8003c26:	2c00      	cmp	r4, #0
 8003c28:	d04b      	beq.n	8003cc2 <_malloc_r+0xea>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	4639      	mov	r1, r7
 8003c2e:	4630      	mov	r0, r6
 8003c30:	eb04 0903 	add.w	r9, r4, r3
 8003c34:	f000 fb60 	bl	80042f8 <_sbrk_r>
 8003c38:	4581      	cmp	r9, r0
 8003c3a:	d142      	bne.n	8003cc2 <_malloc_r+0xea>
 8003c3c:	6821      	ldr	r1, [r4, #0]
 8003c3e:	4630      	mov	r0, r6
 8003c40:	1a6d      	subs	r5, r5, r1
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7ff ffa6 	bl	8003b94 <sbrk_aligned>
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d03a      	beq.n	8003cc2 <_malloc_r+0xea>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	442b      	add	r3, r5
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	f8d8 3000 	ldr.w	r3, [r8]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	bb62      	cbnz	r2, 8003cb4 <_malloc_r+0xdc>
 8003c5a:	f8c8 7000 	str.w	r7, [r8]
 8003c5e:	e00f      	b.n	8003c80 <_malloc_r+0xa8>
 8003c60:	6822      	ldr	r2, [r4, #0]
 8003c62:	1b52      	subs	r2, r2, r5
 8003c64:	d420      	bmi.n	8003ca8 <_malloc_r+0xd0>
 8003c66:	2a0b      	cmp	r2, #11
 8003c68:	d917      	bls.n	8003c9a <_malloc_r+0xc2>
 8003c6a:	1961      	adds	r1, r4, r5
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	6025      	str	r5, [r4, #0]
 8003c70:	bf18      	it	ne
 8003c72:	6059      	strne	r1, [r3, #4]
 8003c74:	6863      	ldr	r3, [r4, #4]
 8003c76:	bf08      	it	eq
 8003c78:	f8c8 1000 	streq.w	r1, [r8]
 8003c7c:	5162      	str	r2, [r4, r5]
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	4630      	mov	r0, r6
 8003c82:	f000 f82f 	bl	8003ce4 <__malloc_unlock>
 8003c86:	f104 000b 	add.w	r0, r4, #11
 8003c8a:	1d23      	adds	r3, r4, #4
 8003c8c:	f020 0007 	bic.w	r0, r0, #7
 8003c90:	1ac2      	subs	r2, r0, r3
 8003c92:	bf1c      	itt	ne
 8003c94:	1a1b      	subne	r3, r3, r0
 8003c96:	50a3      	strne	r3, [r4, r2]
 8003c98:	e7af      	b.n	8003bfa <_malloc_r+0x22>
 8003c9a:	6862      	ldr	r2, [r4, #4]
 8003c9c:	42a3      	cmp	r3, r4
 8003c9e:	bf0c      	ite	eq
 8003ca0:	f8c8 2000 	streq.w	r2, [r8]
 8003ca4:	605a      	strne	r2, [r3, #4]
 8003ca6:	e7eb      	b.n	8003c80 <_malloc_r+0xa8>
 8003ca8:	4623      	mov	r3, r4
 8003caa:	6864      	ldr	r4, [r4, #4]
 8003cac:	e7ae      	b.n	8003c0c <_malloc_r+0x34>
 8003cae:	463c      	mov	r4, r7
 8003cb0:	687f      	ldr	r7, [r7, #4]
 8003cb2:	e7b6      	b.n	8003c22 <_malloc_r+0x4a>
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	42a3      	cmp	r3, r4
 8003cba:	d1fb      	bne.n	8003cb4 <_malloc_r+0xdc>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	6053      	str	r3, [r2, #4]
 8003cc0:	e7de      	b.n	8003c80 <_malloc_r+0xa8>
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	6033      	str	r3, [r6, #0]
 8003cc8:	f000 f80c 	bl	8003ce4 <__malloc_unlock>
 8003ccc:	e794      	b.n	8003bf8 <_malloc_r+0x20>
 8003cce:	6005      	str	r5, [r0, #0]
 8003cd0:	e7d6      	b.n	8003c80 <_malloc_r+0xa8>
 8003cd2:	bf00      	nop
 8003cd4:	2000026c 	.word	0x2000026c

08003cd8 <__malloc_lock>:
 8003cd8:	4801      	ldr	r0, [pc, #4]	@ (8003ce0 <__malloc_lock+0x8>)
 8003cda:	f7ff bf11 	b.w	8003b00 <__retarget_lock_acquire_recursive>
 8003cde:	bf00      	nop
 8003ce0:	20000264 	.word	0x20000264

08003ce4 <__malloc_unlock>:
 8003ce4:	4801      	ldr	r0, [pc, #4]	@ (8003cec <__malloc_unlock+0x8>)
 8003ce6:	f7ff bf0c 	b.w	8003b02 <__retarget_lock_release_recursive>
 8003cea:	bf00      	nop
 8003cec:	20000264 	.word	0x20000264

08003cf0 <__ssputs_r>:
 8003cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	461f      	mov	r7, r3
 8003cf6:	688e      	ldr	r6, [r1, #8]
 8003cf8:	4682      	mov	sl, r0
 8003cfa:	42be      	cmp	r6, r7
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	4690      	mov	r8, r2
 8003d00:	680b      	ldr	r3, [r1, #0]
 8003d02:	d82d      	bhi.n	8003d60 <__ssputs_r+0x70>
 8003d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003d0c:	d026      	beq.n	8003d5c <__ssputs_r+0x6c>
 8003d0e:	6965      	ldr	r5, [r4, #20]
 8003d10:	6909      	ldr	r1, [r1, #16]
 8003d12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d16:	eba3 0901 	sub.w	r9, r3, r1
 8003d1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d1e:	1c7b      	adds	r3, r7, #1
 8003d20:	444b      	add	r3, r9
 8003d22:	106d      	asrs	r5, r5, #1
 8003d24:	429d      	cmp	r5, r3
 8003d26:	bf38      	it	cc
 8003d28:	461d      	movcc	r5, r3
 8003d2a:	0553      	lsls	r3, r2, #21
 8003d2c:	d527      	bpl.n	8003d7e <__ssputs_r+0x8e>
 8003d2e:	4629      	mov	r1, r5
 8003d30:	f7ff ff52 	bl	8003bd8 <_malloc_r>
 8003d34:	4606      	mov	r6, r0
 8003d36:	b360      	cbz	r0, 8003d92 <__ssputs_r+0xa2>
 8003d38:	464a      	mov	r2, r9
 8003d3a:	6921      	ldr	r1, [r4, #16]
 8003d3c:	f000 fafa 	bl	8004334 <memcpy>
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d4a:	81a3      	strh	r3, [r4, #12]
 8003d4c:	6126      	str	r6, [r4, #16]
 8003d4e:	444e      	add	r6, r9
 8003d50:	6026      	str	r6, [r4, #0]
 8003d52:	463e      	mov	r6, r7
 8003d54:	6165      	str	r5, [r4, #20]
 8003d56:	eba5 0509 	sub.w	r5, r5, r9
 8003d5a:	60a5      	str	r5, [r4, #8]
 8003d5c:	42be      	cmp	r6, r7
 8003d5e:	d900      	bls.n	8003d62 <__ssputs_r+0x72>
 8003d60:	463e      	mov	r6, r7
 8003d62:	4632      	mov	r2, r6
 8003d64:	4641      	mov	r1, r8
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	f000 faac 	bl	80042c4 <memmove>
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	68a3      	ldr	r3, [r4, #8]
 8003d70:	1b9b      	subs	r3, r3, r6
 8003d72:	60a3      	str	r3, [r4, #8]
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	4433      	add	r3, r6
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7e:	462a      	mov	r2, r5
 8003d80:	f000 fae6 	bl	8004350 <_realloc_r>
 8003d84:	4606      	mov	r6, r0
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d1e0      	bne.n	8003d4c <__ssputs_r+0x5c>
 8003d8a:	4650      	mov	r0, sl
 8003d8c:	6921      	ldr	r1, [r4, #16]
 8003d8e:	f7ff feb9 	bl	8003b04 <_free_r>
 8003d92:	230c      	movs	r3, #12
 8003d94:	f8ca 3000 	str.w	r3, [sl]
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	e7e9      	b.n	8003d7a <__ssputs_r+0x8a>
	...

08003da8 <_svfiprintf_r>:
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	4698      	mov	r8, r3
 8003dae:	898b      	ldrh	r3, [r1, #12]
 8003db0:	4607      	mov	r7, r0
 8003db2:	061b      	lsls	r3, r3, #24
 8003db4:	460d      	mov	r5, r1
 8003db6:	4614      	mov	r4, r2
 8003db8:	b09d      	sub	sp, #116	@ 0x74
 8003dba:	d510      	bpl.n	8003dde <_svfiprintf_r+0x36>
 8003dbc:	690b      	ldr	r3, [r1, #16]
 8003dbe:	b973      	cbnz	r3, 8003dde <_svfiprintf_r+0x36>
 8003dc0:	2140      	movs	r1, #64	@ 0x40
 8003dc2:	f7ff ff09 	bl	8003bd8 <_malloc_r>
 8003dc6:	6028      	str	r0, [r5, #0]
 8003dc8:	6128      	str	r0, [r5, #16]
 8003dca:	b930      	cbnz	r0, 8003dda <_svfiprintf_r+0x32>
 8003dcc:	230c      	movs	r3, #12
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	b01d      	add	sp, #116	@ 0x74
 8003dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dda:	2340      	movs	r3, #64	@ 0x40
 8003ddc:	616b      	str	r3, [r5, #20]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003de2:	2320      	movs	r3, #32
 8003de4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003de8:	2330      	movs	r3, #48	@ 0x30
 8003dea:	f04f 0901 	mov.w	r9, #1
 8003dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8003df2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003f8c <_svfiprintf_r+0x1e4>
 8003df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	469a      	mov	sl, r3
 8003dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e02:	b10a      	cbz	r2, 8003e08 <_svfiprintf_r+0x60>
 8003e04:	2a25      	cmp	r2, #37	@ 0x25
 8003e06:	d1f9      	bne.n	8003dfc <_svfiprintf_r+0x54>
 8003e08:	ebba 0b04 	subs.w	fp, sl, r4
 8003e0c:	d00b      	beq.n	8003e26 <_svfiprintf_r+0x7e>
 8003e0e:	465b      	mov	r3, fp
 8003e10:	4622      	mov	r2, r4
 8003e12:	4629      	mov	r1, r5
 8003e14:	4638      	mov	r0, r7
 8003e16:	f7ff ff6b 	bl	8003cf0 <__ssputs_r>
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	f000 80a7 	beq.w	8003f6e <_svfiprintf_r+0x1c6>
 8003e20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e22:	445a      	add	r2, fp
 8003e24:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e26:	f89a 3000 	ldrb.w	r3, [sl]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 809f 	beq.w	8003f6e <_svfiprintf_r+0x1c6>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e3a:	f10a 0a01 	add.w	sl, sl, #1
 8003e3e:	9304      	str	r3, [sp, #16]
 8003e40:	9307      	str	r3, [sp, #28]
 8003e42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e46:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e48:	4654      	mov	r4, sl
 8003e4a:	2205      	movs	r2, #5
 8003e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e50:	484e      	ldr	r0, [pc, #312]	@ (8003f8c <_svfiprintf_r+0x1e4>)
 8003e52:	f000 fa61 	bl	8004318 <memchr>
 8003e56:	9a04      	ldr	r2, [sp, #16]
 8003e58:	b9d8      	cbnz	r0, 8003e92 <_svfiprintf_r+0xea>
 8003e5a:	06d0      	lsls	r0, r2, #27
 8003e5c:	bf44      	itt	mi
 8003e5e:	2320      	movmi	r3, #32
 8003e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e64:	0711      	lsls	r1, r2, #28
 8003e66:	bf44      	itt	mi
 8003e68:	232b      	movmi	r3, #43	@ 0x2b
 8003e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e74:	d015      	beq.n	8003ea2 <_svfiprintf_r+0xfa>
 8003e76:	4654      	mov	r4, sl
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f04f 0c0a 	mov.w	ip, #10
 8003e7e:	9a07      	ldr	r2, [sp, #28]
 8003e80:	4621      	mov	r1, r4
 8003e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e86:	3b30      	subs	r3, #48	@ 0x30
 8003e88:	2b09      	cmp	r3, #9
 8003e8a:	d94b      	bls.n	8003f24 <_svfiprintf_r+0x17c>
 8003e8c:	b1b0      	cbz	r0, 8003ebc <_svfiprintf_r+0x114>
 8003e8e:	9207      	str	r2, [sp, #28]
 8003e90:	e014      	b.n	8003ebc <_svfiprintf_r+0x114>
 8003e92:	eba0 0308 	sub.w	r3, r0, r8
 8003e96:	fa09 f303 	lsl.w	r3, r9, r3
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	46a2      	mov	sl, r4
 8003e9e:	9304      	str	r3, [sp, #16]
 8003ea0:	e7d2      	b.n	8003e48 <_svfiprintf_r+0xa0>
 8003ea2:	9b03      	ldr	r3, [sp, #12]
 8003ea4:	1d19      	adds	r1, r3, #4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	9103      	str	r1, [sp, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bfbb      	ittet	lt
 8003eae:	425b      	neglt	r3, r3
 8003eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8003eb4:	9307      	strge	r3, [sp, #28]
 8003eb6:	9307      	strlt	r3, [sp, #28]
 8003eb8:	bfb8      	it	lt
 8003eba:	9204      	strlt	r2, [sp, #16]
 8003ebc:	7823      	ldrb	r3, [r4, #0]
 8003ebe:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ec0:	d10a      	bne.n	8003ed8 <_svfiprintf_r+0x130>
 8003ec2:	7863      	ldrb	r3, [r4, #1]
 8003ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ec6:	d132      	bne.n	8003f2e <_svfiprintf_r+0x186>
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	3402      	adds	r4, #2
 8003ecc:	1d1a      	adds	r2, r3, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	9203      	str	r2, [sp, #12]
 8003ed2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ed6:	9305      	str	r3, [sp, #20]
 8003ed8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003f90 <_svfiprintf_r+0x1e8>
 8003edc:	2203      	movs	r2, #3
 8003ede:	4650      	mov	r0, sl
 8003ee0:	7821      	ldrb	r1, [r4, #0]
 8003ee2:	f000 fa19 	bl	8004318 <memchr>
 8003ee6:	b138      	cbz	r0, 8003ef8 <_svfiprintf_r+0x150>
 8003ee8:	2240      	movs	r2, #64	@ 0x40
 8003eea:	9b04      	ldr	r3, [sp, #16]
 8003eec:	eba0 000a 	sub.w	r0, r0, sl
 8003ef0:	4082      	lsls	r2, r0
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	3401      	adds	r4, #1
 8003ef6:	9304      	str	r3, [sp, #16]
 8003ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003efc:	2206      	movs	r2, #6
 8003efe:	4825      	ldr	r0, [pc, #148]	@ (8003f94 <_svfiprintf_r+0x1ec>)
 8003f00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f04:	f000 fa08 	bl	8004318 <memchr>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d036      	beq.n	8003f7a <_svfiprintf_r+0x1d2>
 8003f0c:	4b22      	ldr	r3, [pc, #136]	@ (8003f98 <_svfiprintf_r+0x1f0>)
 8003f0e:	bb1b      	cbnz	r3, 8003f58 <_svfiprintf_r+0x1b0>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	3307      	adds	r3, #7
 8003f14:	f023 0307 	bic.w	r3, r3, #7
 8003f18:	3308      	adds	r3, #8
 8003f1a:	9303      	str	r3, [sp, #12]
 8003f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f1e:	4433      	add	r3, r6
 8003f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f22:	e76a      	b.n	8003dfa <_svfiprintf_r+0x52>
 8003f24:	460c      	mov	r4, r1
 8003f26:	2001      	movs	r0, #1
 8003f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f2c:	e7a8      	b.n	8003e80 <_svfiprintf_r+0xd8>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f04f 0c0a 	mov.w	ip, #10
 8003f34:	4619      	mov	r1, r3
 8003f36:	3401      	adds	r4, #1
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f40:	3a30      	subs	r2, #48	@ 0x30
 8003f42:	2a09      	cmp	r2, #9
 8003f44:	d903      	bls.n	8003f4e <_svfiprintf_r+0x1a6>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0c6      	beq.n	8003ed8 <_svfiprintf_r+0x130>
 8003f4a:	9105      	str	r1, [sp, #20]
 8003f4c:	e7c4      	b.n	8003ed8 <_svfiprintf_r+0x130>
 8003f4e:	4604      	mov	r4, r0
 8003f50:	2301      	movs	r3, #1
 8003f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f56:	e7f0      	b.n	8003f3a <_svfiprintf_r+0x192>
 8003f58:	ab03      	add	r3, sp, #12
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	462a      	mov	r2, r5
 8003f5e:	4638      	mov	r0, r7
 8003f60:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <_svfiprintf_r+0x1f4>)
 8003f62:	a904      	add	r1, sp, #16
 8003f64:	f3af 8000 	nop.w
 8003f68:	1c42      	adds	r2, r0, #1
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	d1d6      	bne.n	8003f1c <_svfiprintf_r+0x174>
 8003f6e:	89ab      	ldrh	r3, [r5, #12]
 8003f70:	065b      	lsls	r3, r3, #25
 8003f72:	f53f af2d 	bmi.w	8003dd0 <_svfiprintf_r+0x28>
 8003f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f78:	e72c      	b.n	8003dd4 <_svfiprintf_r+0x2c>
 8003f7a:	ab03      	add	r3, sp, #12
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	462a      	mov	r2, r5
 8003f80:	4638      	mov	r0, r7
 8003f82:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <_svfiprintf_r+0x1f4>)
 8003f84:	a904      	add	r1, sp, #16
 8003f86:	f000 f87d 	bl	8004084 <_printf_i>
 8003f8a:	e7ed      	b.n	8003f68 <_svfiprintf_r+0x1c0>
 8003f8c:	080047ca 	.word	0x080047ca
 8003f90:	080047d0 	.word	0x080047d0
 8003f94:	080047d4 	.word	0x080047d4
 8003f98:	00000000 	.word	0x00000000
 8003f9c:	08003cf1 	.word	0x08003cf1

08003fa0 <_printf_common>:
 8003fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa4:	4616      	mov	r6, r2
 8003fa6:	4698      	mov	r8, r3
 8003fa8:	688a      	ldr	r2, [r1, #8]
 8003faa:	690b      	ldr	r3, [r1, #16]
 8003fac:	4607      	mov	r7, r0
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	bfb8      	it	lt
 8003fb2:	4613      	movlt	r3, r2
 8003fb4:	6033      	str	r3, [r6, #0]
 8003fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fba:	460c      	mov	r4, r1
 8003fbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fc0:	b10a      	cbz	r2, 8003fc6 <_printf_common+0x26>
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	6033      	str	r3, [r6, #0]
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	0699      	lsls	r1, r3, #26
 8003fca:	bf42      	ittt	mi
 8003fcc:	6833      	ldrmi	r3, [r6, #0]
 8003fce:	3302      	addmi	r3, #2
 8003fd0:	6033      	strmi	r3, [r6, #0]
 8003fd2:	6825      	ldr	r5, [r4, #0]
 8003fd4:	f015 0506 	ands.w	r5, r5, #6
 8003fd8:	d106      	bne.n	8003fe8 <_printf_common+0x48>
 8003fda:	f104 0a19 	add.w	sl, r4, #25
 8003fde:	68e3      	ldr	r3, [r4, #12]
 8003fe0:	6832      	ldr	r2, [r6, #0]
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	42ab      	cmp	r3, r5
 8003fe6:	dc2b      	bgt.n	8004040 <_printf_common+0xa0>
 8003fe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fec:	6822      	ldr	r2, [r4, #0]
 8003fee:	3b00      	subs	r3, #0
 8003ff0:	bf18      	it	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	0692      	lsls	r2, r2, #26
 8003ff6:	d430      	bmi.n	800405a <_printf_common+0xba>
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004000:	47c8      	blx	r9
 8004002:	3001      	adds	r0, #1
 8004004:	d023      	beq.n	800404e <_printf_common+0xae>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	6922      	ldr	r2, [r4, #16]
 800400a:	f003 0306 	and.w	r3, r3, #6
 800400e:	2b04      	cmp	r3, #4
 8004010:	bf14      	ite	ne
 8004012:	2500      	movne	r5, #0
 8004014:	6833      	ldreq	r3, [r6, #0]
 8004016:	f04f 0600 	mov.w	r6, #0
 800401a:	bf08      	it	eq
 800401c:	68e5      	ldreq	r5, [r4, #12]
 800401e:	f104 041a 	add.w	r4, r4, #26
 8004022:	bf08      	it	eq
 8004024:	1aed      	subeq	r5, r5, r3
 8004026:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800402a:	bf08      	it	eq
 800402c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004030:	4293      	cmp	r3, r2
 8004032:	bfc4      	itt	gt
 8004034:	1a9b      	subgt	r3, r3, r2
 8004036:	18ed      	addgt	r5, r5, r3
 8004038:	42b5      	cmp	r5, r6
 800403a:	d11a      	bne.n	8004072 <_printf_common+0xd2>
 800403c:	2000      	movs	r0, #0
 800403e:	e008      	b.n	8004052 <_printf_common+0xb2>
 8004040:	2301      	movs	r3, #1
 8004042:	4652      	mov	r2, sl
 8004044:	4641      	mov	r1, r8
 8004046:	4638      	mov	r0, r7
 8004048:	47c8      	blx	r9
 800404a:	3001      	adds	r0, #1
 800404c:	d103      	bne.n	8004056 <_printf_common+0xb6>
 800404e:	f04f 30ff 	mov.w	r0, #4294967295
 8004052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004056:	3501      	adds	r5, #1
 8004058:	e7c1      	b.n	8003fde <_printf_common+0x3e>
 800405a:	2030      	movs	r0, #48	@ 0x30
 800405c:	18e1      	adds	r1, r4, r3
 800405e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004068:	4422      	add	r2, r4
 800406a:	3302      	adds	r3, #2
 800406c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004070:	e7c2      	b.n	8003ff8 <_printf_common+0x58>
 8004072:	2301      	movs	r3, #1
 8004074:	4622      	mov	r2, r4
 8004076:	4641      	mov	r1, r8
 8004078:	4638      	mov	r0, r7
 800407a:	47c8      	blx	r9
 800407c:	3001      	adds	r0, #1
 800407e:	d0e6      	beq.n	800404e <_printf_common+0xae>
 8004080:	3601      	adds	r6, #1
 8004082:	e7d9      	b.n	8004038 <_printf_common+0x98>

08004084 <_printf_i>:
 8004084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	7e0f      	ldrb	r7, [r1, #24]
 800408a:	4691      	mov	r9, r2
 800408c:	2f78      	cmp	r7, #120	@ 0x78
 800408e:	4680      	mov	r8, r0
 8004090:	460c      	mov	r4, r1
 8004092:	469a      	mov	sl, r3
 8004094:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800409a:	d807      	bhi.n	80040ac <_printf_i+0x28>
 800409c:	2f62      	cmp	r7, #98	@ 0x62
 800409e:	d80a      	bhi.n	80040b6 <_printf_i+0x32>
 80040a0:	2f00      	cmp	r7, #0
 80040a2:	f000 80d3 	beq.w	800424c <_printf_i+0x1c8>
 80040a6:	2f58      	cmp	r7, #88	@ 0x58
 80040a8:	f000 80ba 	beq.w	8004220 <_printf_i+0x19c>
 80040ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040b4:	e03a      	b.n	800412c <_printf_i+0xa8>
 80040b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040ba:	2b15      	cmp	r3, #21
 80040bc:	d8f6      	bhi.n	80040ac <_printf_i+0x28>
 80040be:	a101      	add	r1, pc, #4	@ (adr r1, 80040c4 <_printf_i+0x40>)
 80040c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	08004131 	.word	0x08004131
 80040cc:	080040ad 	.word	0x080040ad
 80040d0:	080040ad 	.word	0x080040ad
 80040d4:	080040ad 	.word	0x080040ad
 80040d8:	080040ad 	.word	0x080040ad
 80040dc:	08004131 	.word	0x08004131
 80040e0:	080040ad 	.word	0x080040ad
 80040e4:	080040ad 	.word	0x080040ad
 80040e8:	080040ad 	.word	0x080040ad
 80040ec:	080040ad 	.word	0x080040ad
 80040f0:	08004233 	.word	0x08004233
 80040f4:	0800415b 	.word	0x0800415b
 80040f8:	080041ed 	.word	0x080041ed
 80040fc:	080040ad 	.word	0x080040ad
 8004100:	080040ad 	.word	0x080040ad
 8004104:	08004255 	.word	0x08004255
 8004108:	080040ad 	.word	0x080040ad
 800410c:	0800415b 	.word	0x0800415b
 8004110:	080040ad 	.word	0x080040ad
 8004114:	080040ad 	.word	0x080040ad
 8004118:	080041f5 	.word	0x080041f5
 800411c:	6833      	ldr	r3, [r6, #0]
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6032      	str	r2, [r6, #0]
 8004124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800412c:	2301      	movs	r3, #1
 800412e:	e09e      	b.n	800426e <_printf_i+0x1ea>
 8004130:	6833      	ldr	r3, [r6, #0]
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	1d19      	adds	r1, r3, #4
 8004136:	6031      	str	r1, [r6, #0]
 8004138:	0606      	lsls	r6, r0, #24
 800413a:	d501      	bpl.n	8004140 <_printf_i+0xbc>
 800413c:	681d      	ldr	r5, [r3, #0]
 800413e:	e003      	b.n	8004148 <_printf_i+0xc4>
 8004140:	0645      	lsls	r5, r0, #25
 8004142:	d5fb      	bpl.n	800413c <_printf_i+0xb8>
 8004144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004148:	2d00      	cmp	r5, #0
 800414a:	da03      	bge.n	8004154 <_printf_i+0xd0>
 800414c:	232d      	movs	r3, #45	@ 0x2d
 800414e:	426d      	negs	r5, r5
 8004150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004154:	230a      	movs	r3, #10
 8004156:	4859      	ldr	r0, [pc, #356]	@ (80042bc <_printf_i+0x238>)
 8004158:	e011      	b.n	800417e <_printf_i+0xfa>
 800415a:	6821      	ldr	r1, [r4, #0]
 800415c:	6833      	ldr	r3, [r6, #0]
 800415e:	0608      	lsls	r0, r1, #24
 8004160:	f853 5b04 	ldr.w	r5, [r3], #4
 8004164:	d402      	bmi.n	800416c <_printf_i+0xe8>
 8004166:	0649      	lsls	r1, r1, #25
 8004168:	bf48      	it	mi
 800416a:	b2ad      	uxthmi	r5, r5
 800416c:	2f6f      	cmp	r7, #111	@ 0x6f
 800416e:	6033      	str	r3, [r6, #0]
 8004170:	bf14      	ite	ne
 8004172:	230a      	movne	r3, #10
 8004174:	2308      	moveq	r3, #8
 8004176:	4851      	ldr	r0, [pc, #324]	@ (80042bc <_printf_i+0x238>)
 8004178:	2100      	movs	r1, #0
 800417a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800417e:	6866      	ldr	r6, [r4, #4]
 8004180:	2e00      	cmp	r6, #0
 8004182:	bfa8      	it	ge
 8004184:	6821      	ldrge	r1, [r4, #0]
 8004186:	60a6      	str	r6, [r4, #8]
 8004188:	bfa4      	itt	ge
 800418a:	f021 0104 	bicge.w	r1, r1, #4
 800418e:	6021      	strge	r1, [r4, #0]
 8004190:	b90d      	cbnz	r5, 8004196 <_printf_i+0x112>
 8004192:	2e00      	cmp	r6, #0
 8004194:	d04b      	beq.n	800422e <_printf_i+0x1aa>
 8004196:	4616      	mov	r6, r2
 8004198:	fbb5 f1f3 	udiv	r1, r5, r3
 800419c:	fb03 5711 	mls	r7, r3, r1, r5
 80041a0:	5dc7      	ldrb	r7, [r0, r7]
 80041a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041a6:	462f      	mov	r7, r5
 80041a8:	42bb      	cmp	r3, r7
 80041aa:	460d      	mov	r5, r1
 80041ac:	d9f4      	bls.n	8004198 <_printf_i+0x114>
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d10b      	bne.n	80041ca <_printf_i+0x146>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	07df      	lsls	r7, r3, #31
 80041b6:	d508      	bpl.n	80041ca <_printf_i+0x146>
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	6861      	ldr	r1, [r4, #4]
 80041bc:	4299      	cmp	r1, r3
 80041be:	bfde      	ittt	le
 80041c0:	2330      	movle	r3, #48	@ 0x30
 80041c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041ca:	1b92      	subs	r2, r2, r6
 80041cc:	6122      	str	r2, [r4, #16]
 80041ce:	464b      	mov	r3, r9
 80041d0:	4621      	mov	r1, r4
 80041d2:	4640      	mov	r0, r8
 80041d4:	f8cd a000 	str.w	sl, [sp]
 80041d8:	aa03      	add	r2, sp, #12
 80041da:	f7ff fee1 	bl	8003fa0 <_printf_common>
 80041de:	3001      	adds	r0, #1
 80041e0:	d14a      	bne.n	8004278 <_printf_i+0x1f4>
 80041e2:	f04f 30ff 	mov.w	r0, #4294967295
 80041e6:	b004      	add	sp, #16
 80041e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	f043 0320 	orr.w	r3, r3, #32
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	2778      	movs	r7, #120	@ 0x78
 80041f6:	4832      	ldr	r0, [pc, #200]	@ (80042c0 <_printf_i+0x23c>)
 80041f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	6831      	ldr	r1, [r6, #0]
 8004200:	061f      	lsls	r7, r3, #24
 8004202:	f851 5b04 	ldr.w	r5, [r1], #4
 8004206:	d402      	bmi.n	800420e <_printf_i+0x18a>
 8004208:	065f      	lsls	r7, r3, #25
 800420a:	bf48      	it	mi
 800420c:	b2ad      	uxthmi	r5, r5
 800420e:	6031      	str	r1, [r6, #0]
 8004210:	07d9      	lsls	r1, r3, #31
 8004212:	bf44      	itt	mi
 8004214:	f043 0320 	orrmi.w	r3, r3, #32
 8004218:	6023      	strmi	r3, [r4, #0]
 800421a:	b11d      	cbz	r5, 8004224 <_printf_i+0x1a0>
 800421c:	2310      	movs	r3, #16
 800421e:	e7ab      	b.n	8004178 <_printf_i+0xf4>
 8004220:	4826      	ldr	r0, [pc, #152]	@ (80042bc <_printf_i+0x238>)
 8004222:	e7e9      	b.n	80041f8 <_printf_i+0x174>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	f023 0320 	bic.w	r3, r3, #32
 800422a:	6023      	str	r3, [r4, #0]
 800422c:	e7f6      	b.n	800421c <_printf_i+0x198>
 800422e:	4616      	mov	r6, r2
 8004230:	e7bd      	b.n	80041ae <_printf_i+0x12a>
 8004232:	6833      	ldr	r3, [r6, #0]
 8004234:	6825      	ldr	r5, [r4, #0]
 8004236:	1d18      	adds	r0, r3, #4
 8004238:	6961      	ldr	r1, [r4, #20]
 800423a:	6030      	str	r0, [r6, #0]
 800423c:	062e      	lsls	r6, r5, #24
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	d501      	bpl.n	8004246 <_printf_i+0x1c2>
 8004242:	6019      	str	r1, [r3, #0]
 8004244:	e002      	b.n	800424c <_printf_i+0x1c8>
 8004246:	0668      	lsls	r0, r5, #25
 8004248:	d5fb      	bpl.n	8004242 <_printf_i+0x1be>
 800424a:	8019      	strh	r1, [r3, #0]
 800424c:	2300      	movs	r3, #0
 800424e:	4616      	mov	r6, r2
 8004250:	6123      	str	r3, [r4, #16]
 8004252:	e7bc      	b.n	80041ce <_printf_i+0x14a>
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	2100      	movs	r1, #0
 8004258:	1d1a      	adds	r2, r3, #4
 800425a:	6032      	str	r2, [r6, #0]
 800425c:	681e      	ldr	r6, [r3, #0]
 800425e:	6862      	ldr	r2, [r4, #4]
 8004260:	4630      	mov	r0, r6
 8004262:	f000 f859 	bl	8004318 <memchr>
 8004266:	b108      	cbz	r0, 800426c <_printf_i+0x1e8>
 8004268:	1b80      	subs	r0, r0, r6
 800426a:	6060      	str	r0, [r4, #4]
 800426c:	6863      	ldr	r3, [r4, #4]
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	2300      	movs	r3, #0
 8004272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004276:	e7aa      	b.n	80041ce <_printf_i+0x14a>
 8004278:	4632      	mov	r2, r6
 800427a:	4649      	mov	r1, r9
 800427c:	4640      	mov	r0, r8
 800427e:	6923      	ldr	r3, [r4, #16]
 8004280:	47d0      	blx	sl
 8004282:	3001      	adds	r0, #1
 8004284:	d0ad      	beq.n	80041e2 <_printf_i+0x15e>
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	079b      	lsls	r3, r3, #30
 800428a:	d413      	bmi.n	80042b4 <_printf_i+0x230>
 800428c:	68e0      	ldr	r0, [r4, #12]
 800428e:	9b03      	ldr	r3, [sp, #12]
 8004290:	4298      	cmp	r0, r3
 8004292:	bfb8      	it	lt
 8004294:	4618      	movlt	r0, r3
 8004296:	e7a6      	b.n	80041e6 <_printf_i+0x162>
 8004298:	2301      	movs	r3, #1
 800429a:	4632      	mov	r2, r6
 800429c:	4649      	mov	r1, r9
 800429e:	4640      	mov	r0, r8
 80042a0:	47d0      	blx	sl
 80042a2:	3001      	adds	r0, #1
 80042a4:	d09d      	beq.n	80041e2 <_printf_i+0x15e>
 80042a6:	3501      	adds	r5, #1
 80042a8:	68e3      	ldr	r3, [r4, #12]
 80042aa:	9903      	ldr	r1, [sp, #12]
 80042ac:	1a5b      	subs	r3, r3, r1
 80042ae:	42ab      	cmp	r3, r5
 80042b0:	dcf2      	bgt.n	8004298 <_printf_i+0x214>
 80042b2:	e7eb      	b.n	800428c <_printf_i+0x208>
 80042b4:	2500      	movs	r5, #0
 80042b6:	f104 0619 	add.w	r6, r4, #25
 80042ba:	e7f5      	b.n	80042a8 <_printf_i+0x224>
 80042bc:	080047db 	.word	0x080047db
 80042c0:	080047ec 	.word	0x080047ec

080042c4 <memmove>:
 80042c4:	4288      	cmp	r0, r1
 80042c6:	b510      	push	{r4, lr}
 80042c8:	eb01 0402 	add.w	r4, r1, r2
 80042cc:	d902      	bls.n	80042d4 <memmove+0x10>
 80042ce:	4284      	cmp	r4, r0
 80042d0:	4623      	mov	r3, r4
 80042d2:	d807      	bhi.n	80042e4 <memmove+0x20>
 80042d4:	1e43      	subs	r3, r0, #1
 80042d6:	42a1      	cmp	r1, r4
 80042d8:	d008      	beq.n	80042ec <memmove+0x28>
 80042da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042e2:	e7f8      	b.n	80042d6 <memmove+0x12>
 80042e4:	4601      	mov	r1, r0
 80042e6:	4402      	add	r2, r0
 80042e8:	428a      	cmp	r2, r1
 80042ea:	d100      	bne.n	80042ee <memmove+0x2a>
 80042ec:	bd10      	pop	{r4, pc}
 80042ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042f6:	e7f7      	b.n	80042e8 <memmove+0x24>

080042f8 <_sbrk_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	2300      	movs	r3, #0
 80042fc:	4d05      	ldr	r5, [pc, #20]	@ (8004314 <_sbrk_r+0x1c>)
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f7fd fff4 	bl	80022f0 <_sbrk>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_sbrk_r+0x1a>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_sbrk_r+0x1a>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	20000260 	.word	0x20000260

08004318 <memchr>:
 8004318:	4603      	mov	r3, r0
 800431a:	b510      	push	{r4, lr}
 800431c:	b2c9      	uxtb	r1, r1
 800431e:	4402      	add	r2, r0
 8004320:	4293      	cmp	r3, r2
 8004322:	4618      	mov	r0, r3
 8004324:	d101      	bne.n	800432a <memchr+0x12>
 8004326:	2000      	movs	r0, #0
 8004328:	e003      	b.n	8004332 <memchr+0x1a>
 800432a:	7804      	ldrb	r4, [r0, #0]
 800432c:	3301      	adds	r3, #1
 800432e:	428c      	cmp	r4, r1
 8004330:	d1f6      	bne.n	8004320 <memchr+0x8>
 8004332:	bd10      	pop	{r4, pc}

08004334 <memcpy>:
 8004334:	440a      	add	r2, r1
 8004336:	4291      	cmp	r1, r2
 8004338:	f100 33ff 	add.w	r3, r0, #4294967295
 800433c:	d100      	bne.n	8004340 <memcpy+0xc>
 800433e:	4770      	bx	lr
 8004340:	b510      	push	{r4, lr}
 8004342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004346:	4291      	cmp	r1, r2
 8004348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800434c:	d1f9      	bne.n	8004342 <memcpy+0xe>
 800434e:	bd10      	pop	{r4, pc}

08004350 <_realloc_r>:
 8004350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004354:	4680      	mov	r8, r0
 8004356:	4615      	mov	r5, r2
 8004358:	460c      	mov	r4, r1
 800435a:	b921      	cbnz	r1, 8004366 <_realloc_r+0x16>
 800435c:	4611      	mov	r1, r2
 800435e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004362:	f7ff bc39 	b.w	8003bd8 <_malloc_r>
 8004366:	b92a      	cbnz	r2, 8004374 <_realloc_r+0x24>
 8004368:	f7ff fbcc 	bl	8003b04 <_free_r>
 800436c:	2400      	movs	r4, #0
 800436e:	4620      	mov	r0, r4
 8004370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004374:	f000 f81a 	bl	80043ac <_malloc_usable_size_r>
 8004378:	4285      	cmp	r5, r0
 800437a:	4606      	mov	r6, r0
 800437c:	d802      	bhi.n	8004384 <_realloc_r+0x34>
 800437e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004382:	d8f4      	bhi.n	800436e <_realloc_r+0x1e>
 8004384:	4629      	mov	r1, r5
 8004386:	4640      	mov	r0, r8
 8004388:	f7ff fc26 	bl	8003bd8 <_malloc_r>
 800438c:	4607      	mov	r7, r0
 800438e:	2800      	cmp	r0, #0
 8004390:	d0ec      	beq.n	800436c <_realloc_r+0x1c>
 8004392:	42b5      	cmp	r5, r6
 8004394:	462a      	mov	r2, r5
 8004396:	4621      	mov	r1, r4
 8004398:	bf28      	it	cs
 800439a:	4632      	movcs	r2, r6
 800439c:	f7ff ffca 	bl	8004334 <memcpy>
 80043a0:	4621      	mov	r1, r4
 80043a2:	4640      	mov	r0, r8
 80043a4:	f7ff fbae 	bl	8003b04 <_free_r>
 80043a8:	463c      	mov	r4, r7
 80043aa:	e7e0      	b.n	800436e <_realloc_r+0x1e>

080043ac <_malloc_usable_size_r>:
 80043ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b0:	1f18      	subs	r0, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bfbc      	itt	lt
 80043b6:	580b      	ldrlt	r3, [r1, r0]
 80043b8:	18c0      	addlt	r0, r0, r3
 80043ba:	4770      	bx	lr

080043bc <_init>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	bf00      	nop
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr

080043c8 <_fini>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	bf00      	nop
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr
